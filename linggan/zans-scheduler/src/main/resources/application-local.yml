server:
  port: 29527
  ssl:
    enabled: false
  undertow:
    io-threads: 4
    worker-threads: 32
    max-http-post-size: 0


spring:
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    druid:
      job:
        url: jdbc:mysql://192.168.9.52:3306/guard_job?autoReconnect=true&failOverReadOnly=false&characterEncoding=utf-8&useUnicode=true&zeroDateTimeBehavior=convertToNull
        username: guard_2
        password: Txsqldb@123456
        driver-class-name: com.mysql.jdbc.Driver
        business:
          url: jdbc:mysql://192.168.9.52:3306/guard_scan?autoReconnect=true&failOverReadOnly=false&characterEncoding=utf-8&useUnicode=true&zeroDateTimeBehavior=convertToNull
          username: guard_2
          password: Txsqldb@123456
          driver-class-name: com.mysql.jdbc.Driver
  quartz:
    auto-startup: true
    startup-delay: 30s
    job-store-type: jdbc #数据库方式
    jdbc:
      initialize-schema: never #不初始化表结构 ````````````````````````````````````````````````````````````````````````````
    properties:
      org:
        quartz:
          scheduler:
            instanceId: AUTO #默认主机名和时间戳生成实例ID,可以是任何字符串，但对于所有调度程序来说，必须是唯一的 对应qrtz_scheduler_state INSTANCE_NAME字段
            instanceName: clusteredScheduler #quartzScheduler
          jobStore:
            class: org.quartz.impl.jdbcjobstore.JobStoreTX #持久化配置
            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate #我们仅为数据库制作了特定于数据库的代理
            useProperties: true #以指示JDBCJobStore将JobDataMaps中的所有值都作为字符串，因此可以作为名称 - 值对存储而不是在BLOB列中以其序列化形式存储更多复杂的对象。从长远来看，这是更安全的，因为您避免了将非String类序列化为BLOB的类版本问题。
            tablePrefix: QRTZ_  #数据库表前缀
            misfireThreshold: 60000 #在被认为“失火”之前，调度程序将“容忍”一个Triggers将其下一个启动时间通过的毫秒数。默认值（如果您在配置中未输入此属性）为60000（60秒）。
            clusterCheckinInterval: 5000 #设置此实例“检入”*与群集的其他实例的频率（以毫秒为单位）。影响检测失败实例的速度。
            isClustered: true #打开群集功能
          threadPool: #连接池
            class: org.quartz.simpl.SimpleThreadPool
            threadCount: 100
            threadPriority: 5
            threadsInheritContextClassLoaderOfInitializingThread: true

#logging:
#  level:
#    com.zans.job.dao : debug

upgrade:
  src:
    folder: D:\02.gitlab\zans_install\release\
  app:
    scan:
      id: scan # supervisorctl name
      folder: /home/release/scan/ # folder
      file: scan_run # file-achieve
      nodeType: scan
    job:
      id: job
      folder: /home/release/job/
      file: job.jar
      nodeType: job
    portal:
      id: portal
      folder: /home/release/portal/
      file: portal.jar
      nodeType: portal
    rad-api:
      id: rad_api
      folder: /home/release/scan-client/
      file: rad_api
      nodeType: rad_api
