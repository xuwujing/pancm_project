<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zans.mms.dao.TicketDao">

    <resultMap type="com.zans.mms.vo.ticket.TicketSearchRespVO" id="TicketMap">
        <result property="id" column="id" jdbcType="INTEGER"/>
        <result property="ticketCode" column="ticket_code" jdbcType="VARCHAR"/>
        <result property="ticketCodeResult" column="ticket_code_result" jdbcType="VARCHAR"/>
        <result property="ticketType" column="ticket_type" jdbcType="INTEGER"/>
        <result property="editStatus" column="edit_status" jdbcType="INTEGER"/>
        <result property="areaId" column="area_id" jdbcType="VARCHAR"/>
        <result property="deviceType" column="device_type" jdbcType="VARCHAR"/>
        <result property="issueType" column="issue_type" jdbcType="INTEGER"/>
        <result property="issueLevel" column="issue_level" jdbcType="INTEGER"/>
        <result property="issueSource" column="issue_source" jdbcType="INTEGER"/>
        <result property="applyContact" column="apply_contact" jdbcType="VARCHAR"/>
        <result property="applyPhone" column="apply_phone" jdbcType="VARCHAR"/>
        <result property="dutyContact" column="duty_contact" jdbcType="VARCHAR"/>
        <result property="occurredTime" column="occurred_time"/>
        <result property="predictCost" column="predict_cost" jdbcType="NUMERIC"/>
        <result property="acceptPredictCost" column="accept_predict_cost" jdbcType="NUMERIC"/>
        <result property="acceptAdjustCost" column="accept_adjust_cost" jdbcType="NUMERIC"/>
        <result property="allocDepartmentNum" column="alloc_department_num" jdbcType="VARCHAR"/>
        <result property="predictArriveTime" column="predict_arrive_time" jdbcType="TIMESTAMP"/>
        <result property="predictCompleteTime" column="predict_complete_time" jdbcType="TIMESTAMP"/>
        <result property="practicalArriveTime" column="practical_arrive_time" jdbcType="TIMESTAMP"/>
        <result property="practicalCompleteTime" column="practical_complete_time" jdbcType="TIMESTAMP"/>
        <result property="practicalIssueType" column="practical_issue_type" jdbcType="INTEGER"/>
        <result property="adjunctId" column="adjunct_id" jdbcType="VARCHAR"/>
        <result property="acceptAdjunctId" column="accept_adjunct_id" jdbcType="VARCHAR"/>
        <result property="ticketStatus" column="ticket_status" jdbcType="INTEGER"/>
        <result property="dispatchStatus" column="dispatch_status" jdbcType="INTEGER"/>
        <result property="acceptStatus" column="accept_status" jdbcType="INTEGER"/>
        <result property="maintenanceStatus" column="maintenance_status" jdbcType="INTEGER"/>
        <result property="isClockIn" column="isClockIn" jdbcType="INTEGER"/>
        <result property="editStatus" column="edit_status" jdbcType="INTEGER"/>
        <result property="isCost" column="is_cost" jdbcType="INTEGER"/>
        <result property="predictComplete" column="predict_complete" jdbcType="INTEGER"/>
        <result property="predictArrive" column="predict_arrive" jdbcType="INTEGER"/>
        <result property="remark" column="remark" jdbcType="VARCHAR"/>
        <result property="dispatchStatusName" column="dispatchStatusName" jdbcType="VARCHAR"/>
        <result property="acceptStatusName" column="acceptStatusName" jdbcType="VARCHAR"/>
        <result property="pointName" column="point_name" jdbcType="VARCHAR"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
        <result property="creatorNickname" column="creatorNickname" jdbcType="VARCHAR"/>
        <result property="creatorRole" column="creatorRole" jdbcType="VARCHAR"/>
        <result property="createSource" column="createSource" jdbcType="VARCHAR"/>
        <result property="dispatchTime" column="dispatch_time" jdbcType="VARCHAR"/>
        <result property="acceptTime" column="accept_time" jdbcType="VARCHAR"/>
        <result property="pid" column="pid" jdbcType="INTEGER"/>
        <result property="pointId" column="point_id" jdbcType="INTEGER"/>
        <result property="isMerge" column="is_merge" jdbcType="INTEGER"/>
        <result property="mark" column="mark" jdbcType="VARCHAR"/>
        <result property="creator" column="creator" jdbcType="VARCHAR"/>
        <result property="dispatchApprovalTime" column="dispatch_approval_time" jdbcType="TIMESTAMP"/>
        <result property="acceptApprovalTime" column="accept_approval_time" jdbcType="TIMESTAMP"/>
        <result property="dealWay" column="deal_way" jdbcType="INTEGER"/>
        <result property="patrolCheckResultId" column="patrol_check_result_id" jdbcType="INTEGER"/>
        <collection property="adjunctList" javaType="arraylist" ofType="com.zans.mms.model.BaseVfs">
            <result column="adjId" property="id"></result>
            <result column="raw_file_path" property="rawFilePath"></result>
            <result column="thumbnail_file_path" property="thumbnailFilePath"></result>
            <result column="content_type" property="contentType"></result>
        </collection>
    </resultMap>

    <resultMap type="com.zans.mms.vo.ticket.TicketDispatchViewRespVO" id="TicketDispatchViewMap">
        <result property="id" column="id" jdbcType="INTEGER"/>
        <result property="ticketCode" column="ticket_code" jdbcType="VARCHAR"/>
        <result property="ticketCodeResult" column="ticket_code_result" jdbcType="VARCHAR"/>
        <result property="ticketType" column="ticket_type" jdbcType="INTEGER"/>
        <result property="areaId" column="area_id" jdbcType="VARCHAR"/>
        <result property="deviceType" column="device_type" jdbcType="VARCHAR"/>
        <result property="issueType" column="issue_type" jdbcType="INTEGER"/>
        <result property="issueLevel" column="issue_level" jdbcType="INTEGER"/>
        <result property="issueSource" column="issue_source" jdbcType="INTEGER"/>
        <result property="applyContact" column="apply_contact" jdbcType="VARCHAR"/>
        <result property="applyPhone" column="apply_phone" jdbcType="VARCHAR"/>
        <result property="dutyContact" column="duty_contact" jdbcType="VARCHAR"/>
        <result property="predictCost" column="predict_cost" jdbcType="NUMERIC"/>
        <result property="acceptAdjustCost" column="accept_adjust_cost" jdbcType="NUMERIC"/>
        <result property="allocDepartmentNum" column="alloc_department_num" jdbcType="VARCHAR"/>
        <result property="maintenanceStatus" column="maintenance_status" jdbcType="VARCHAR"/>
        <result property="ticketStatus" column="ticket_status" jdbcType="INTEGER"/>
        <result property="dispatchStatus" column="dispatch_status" jdbcType="INTEGER"/>
        <result property="acceptStatus" column="accept_status" jdbcType="INTEGER"/>
        <result property="remark" column="remark" jdbcType="VARCHAR"/>
        <result property="mark" column="mark" jdbcType="VARCHAR"/>
        <result property="dispatchStatusName" column="dispatchStatusName" jdbcType="VARCHAR"/>
        <result property="acceptStatusName" column="acceptStatusName" jdbcType="VARCHAR"/>
        <result property="pointName" column="point_name" jdbcType="VARCHAR"/>
        <result property="adjunctId" column="adjunct_id" jdbcType="VARCHAR"/>
        <result property="dispatchTime" column="dispatch_time" jdbcType="VARCHAR"/>
        <result property="createTime" column="create_time" jdbcType="VARCHAR"/>
        <result property="isMerge" column="is_merge" jdbcType="INTEGER"/>
        <result property="pid" column="pid" jdbcType="INTEGER"/>
        <result property="dealWay" column="deal_way" jdbcType="INTEGER"/>
        <result property="patrolCheckResultId" column="patrol_check_result_id" jdbcType="INTEGER"/>
        <result property="creator" column="creator" jdbcType="VARCHAR"/>
        <collection property="baseMfRespVOList" javaType="arraylist" ofType="com.zans.mms.vo.ticket.TicketBaseMfRespVO">
            <result property="id" column="fid" ></result>
            <result property="deviceCode" column="device_code" ></result>
            <result property="deviceName" column="device_name" ></result>
            <result property="devicePrice" column="device_price" ></result>
            <result property="deviceModel" column="device_model" ></result>
            <result property="deviceSpec" column="device_spec" ></result>
            <result property="deviceBrand" column="device_brand" ></result>
            <result property="amount" column="amount" ></result>
            <result property="predictPrice" column="predict_price" ></result>
        </collection>
        <collection property="adjunctList" javaType="arraylist" ofType="com.zans.mms.model.BaseVfs">
            <result column="adjId" property="id"></result>
            <result column="raw_file_path" property="rawFilePath"></result>
            <result column="thumbnail_file_path" property="thumbnailFilePath"></result>
            <result column="content_type" property="contentType"></result>
        </collection>
    </resultMap>


    <resultMap type="com.zans.mms.vo.ticket.TicketAcceptViewRespVO" id="TicketAcceptViewMap">
        <result property="id" column="id" jdbcType="INTEGER"/>
        <result property="ticketCode" column="ticket_code" jdbcType="VARCHAR"/>
        <result property="ticketCodeResult" column="ticket_code_result" jdbcType="VARCHAR"/>
        <result property="ticketType" column="ticket_type" jdbcType="INTEGER"/>
        <result property="areaId" column="area_id" jdbcType="VARCHAR"/>
        <result property="deviceType" column="device_type" jdbcType="VARCHAR"/>
        <result property="issueType" column="issue_type" jdbcType="INTEGER"/>
        <result property="issueLevel" column="issue_level" jdbcType="INTEGER"/>
        <result property="issueSource" column="issue_source" jdbcType="INTEGER"/>
        <result property="applyContact" column="apply_contact" jdbcType="VARCHAR"/>
        <result property="applyPhone" column="apply_phone" jdbcType="VARCHAR"/>
        <result property="dutyContact" column="duty_contact" jdbcType="VARCHAR"/>
        <result property="predictCost" column="predict_cost" jdbcType="NUMERIC"/>
        <result property="acceptPredictCost" column="accept_predict_cost" jdbcType="NUMERIC"/>
        <result property="acceptAdjustCost" column="accept_adjust_cost" jdbcType="NUMERIC"/>
        <result property="allocDepartmentNum" column="alloc_department_num" jdbcType="VARCHAR"/>
        <result property="ticketStatus" column="ticket_status" jdbcType="INTEGER"/>
        <result property="dispatchStatus" column="dispatch_status" jdbcType="INTEGER"/>
        <result property="acceptStatus" column="accept_status" jdbcType="INTEGER"/>
        <result property="isMerge" column="is_merge" jdbcType="INTEGER"/>
        <result property="pid" column="pid" jdbcType="INTEGER"/>
        <result property="mark" column="mark" jdbcType="VARCHAR"/>
        <result property="remark" column="remark" jdbcType="VARCHAR"/>
        <result property="dispatchStatusName" column="dispatchStatusName" jdbcType="VARCHAR"/>
        <result property="acceptStatusName" column="acceptStatusName" jdbcType="VARCHAR"/>
        <result property="pointName" column="point_name" jdbcType="VARCHAR"/>
        <result property="acceptAdjunctId" column="accept_adjunct_id" jdbcType="VARCHAR"/>
        <result property="dispatchTime" column="dispatch_time" jdbcType="VARCHAR"/>
        <result property="acceptTime" column="accept_time" jdbcType="VARCHAR"/>
        <result property="createTime" column="create_time" jdbcType="VARCHAR"/>
        <result property="dealWay" column="deal_way" jdbcType="INTEGER"/>
        <result property="acceptanceInstructions" column="acceptance_instructions" jdbcType="VARCHAR"/>
        <result property="patrolCheckResultId" column="patrol_check_result_id" jdbcType="INTEGER"/>
        <result property="creator" column="creator" jdbcType="VARCHAR"/>
        <collection property="baseMfRespVOList" javaType="arraylist" ofType="com.zans.mms.vo.ticket.TicketBaseMfRespVO">
            <result property="id" column="fid" ></result>
            <result property="deviceCode" column="device_code" ></result>
            <result property="deviceName" column="device_name" ></result>
            <result property="devicePrice" column="device_price" ></result>
            <result property="deviceModel" column="device_model" ></result>
            <result property="deviceSpec" column="device_spec" ></result>
            <result property="amount" column="amount" ></result>
            <result property="adjAmount" column="adj_amount" ></result>
            <result property="predictPrice" column="predict_price" ></result>
            <result property="adjustPrice" column="adjust_price" ></result>
        </collection>
        <collection property="adjunctList" javaType="arraylist" ofType="com.zans.mms.model.BaseVfs">
            <result column="adjId" property="id"></result>
            <result column="raw_file_path" property="rawFilePath"></result>
            <result column="thumbnail_file_path" property="thumbnailFilePath"></result>
            <result column="content_type" property="contentType"></result>
        </collection>
    </resultMap>


    <resultMap type="com.zans.mms.vo.ticket.TicketImgVO" id="TicketImageMap">
        <result property="opName" column="opName" jdbcType="INTEGER"/>
        <result property="opTime" column="opTime" jdbcType="VARCHAR"/>
        <result property="operation" column="operation" jdbcType="VARCHAR"/>
        <result property="msg" column="msg" jdbcType="INTEGER"/>
        <collection property="baseVfsList" javaType="arraylist" ofType="com.zans.mms.model.BaseVfs">
            <result column="id" property="id"></result>
            <result column="raw_file_path" property="rawFilePath"></result>
            <result column="thumbnail_file_path" property="thumbnailFilePath"></result>
            <result column="content_type" property="contentType"></result>
        </collection>
    </resultMap>



    <!--查询单个-->
    <select id="queryById" resultMap="TicketMap">
        select t.id,
               ticket_code,
               ticket_code_result,
               ticket_type,
               area_id,
               device_type,
               issue_type,
               issue_level,
               issue_source,
               duty_contact,
               apply_contact,
               apply_phone,
               DATE_FORMAT(occurred_time,'%Y-%m-%d %H:%i:%s') as occurred_time,
               predict_cost,
               accept_predict_cost,
               accept_adjust_cost,
               alloc_department_num,
               predict_arrive,
               predict_complete,
               DATE_FORMAT(t.predict_arrive_time,'%Y-%m-%d %H:%i:%s') AS predict_arrive_time,
               DATE_FORMAT(t.predict_complete_time,'%Y-%m-%d %H:%i:%s') AS predict_complete_time,
               DATE_FORMAT(t.practical_arrive_time,'%Y-%m-%d %H:%i:%s') AS practical_arrive_time,
               DATE_FORMAT(t.practical_complete_time,'%Y-%m-%d %H:%i:%s') AS practical_complete_time,
               DATE_FORMAT(t.create_time,'%Y-%m-%d %H:%i:%s') AS create_time,
               practical_issue_type,
               t.adjunct_id,
               t.patrol_check_result_id,
               t.deal_way,
               accept_adjunct_id,
               ticket_status,
               dispatch_status,
               accept_status,
               maintenance_status,
               case when  practical_arrive_time is null then 0 else  1 end as isClockIn,
               (select wsm.business_status_name   from workflow_state_mapping wsm where wsm.business_status_code = t.dispatch_status and wsm.workflow_id = 'dispatch'  ) as dispatchStatusName ,
               (select wsm.business_status_name   from workflow_state_mapping wsm where wsm.business_status_code = t.accept_status and wsm.workflow_id = 'acceptance'  ) as acceptStatusName ,
               edit_status,
               is_cost,
               t.is_merge,
               t.pid,
               t.mark,
               t.remark,
               t.creator,
               bv.id as adjId,
               bv.raw_file_path,
               bv.thumbnail_file_path,
               bv.content_type,
               su.nick_name as creatorNickname,
               bor.role_name as creatorRole,
               t.op_platform as createSource,
               IFNULL( DATE_FORMAT(t.dispatch_time,'%Y-%m-%d %H:%i:%s'), DATE_FORMAT(t.create_time,'%Y-%m-%d %H:%i:%s')) as dispatch_time
        from ticket t
                 LEFT JOIN base_vfs bv ON t.adjunct_id = bv.adjunct_id
                 LEFT JOIN sys_user su on su.user_name=t.creator
                 LEFT JOIN base_org_role bor on bor.role_id = su.role_num
        where t.id = #{id}
        order by  bv.sort,bv.create_time asc
    </select>


    <!--通过实体作为筛选条件查询-->
    <select id="queryAll" resultMap="TicketMap">
        select
        t.id,edit_status, ticket_code,ticket_code_result,ticket_type, t.area_id, t.device_type, issue_level,
        issue_source,
        IF(practical_issue_type=0,issue_type,practical_issue_type) as issue_type,
        dispatch_status,accept_status,maintenance_status,t.deal_way,
        t.creator,t.alloc_department_num,t.is_cost,t.predict_cost,t.accept_predict_cost,t.accept_adjust_cost,
        DATE_FORMAT(t.create_time,'%Y-%m-%d %H:%i:%s') AS create_time,
        t.pid,t.is_merge,t.mark,t.patrol_check_result_id,
        <if test="isNeedRemark !=null">
            t.remark,
        </if>
        DATE_FORMAT(t.dispatch_approval_time,'%Y-%m-%d %H:%i:%s') as dispatch_approval_time,
        DATE_FORMAT(t.accept_approval_time,'%Y-%m-%d %H:%i:%s') as accept_approval_time,
        case when t.edit_status = 0 then 19 else ticket_status end as ticket_status,
        (select point_id from ticket_point tp where t.id = tp.ticket_id  limit 1 ) as point_id,
        IFNULL( DATE_FORMAT(t.dispatch_time,'%Y-%m-%d %H:%i:%s'), DATE_FORMAT(t.create_time,'%Y-%m-%d %H:%i:%s')) as
        dispatch_time,
        IFNULL( DATE_FORMAT(t.accept_time,'%Y-%m-%d %H:%i:%s'), DATE_FORMAT(t.create_time,'%Y-%m-%d %H:%i:%s')) as
        accept_time
        from ticket t
        <where>
            <if test="id != null">
                and t.id = #{id}
            </if>
            <if test="dealWay !=null">
                and t.deal_way = #{dealWay}
            </if>
            <if test="dealWayList != null and dealWayList.size > 0">
                andt.deal_way in
                <foreach collection="dealWayList" item="dealway" separator="," open="(" close=")">
                    #{dealway}
                </foreach>
            </if>
            <if test="ticketCode != null and ticketCode != ''">
                and (ticket_code like CONCAT('%',#{ticketCode},'%') or ticket_code_result like
                CONCAT('%',#{ticketCode},'%'))
            </if>
            <if test="ticketCodeResult != null and ticketCodeResult != ''">
                and ticket_code_result like CONCAT('%',#{ticketCodeResult},'%')
            </if>
            <if test="mark != null and mark != ''">
                and mark like CONCAT('%',#{mark},'%')
            </if>
            <if test="ticketType != null">
                and ticket_type = #{ticketType}
            </if>
            <if test="areaId != null and areaId.size > 0">
                and t.area_id in
                <foreach collection="areaId" item="areaid" separator="," open="(" close=")">#{areaid}
                </foreach>
            </if>
            <if test="deviceType != null and deviceType != ''">
                and t.device_type = #{deviceType}
            </if>
            <if test="issueType != null and issueType.size >0">
                and  IF(practical_issue_type=0,issue_type,practical_issue_type)  in
                <foreach collection="issueType" item="issuetype" separator="," open="(" close=")" >
                    #{issuetype}
                </foreach>
            </if>
            <if test="allocDepartmentNum != null and allocDepartmentNum != ''">
                and t.alloc_department_num = #{allocDepartmentNum}
            </if>
            <if test="editStatus != null">
                <if test=" editStatus == 1 and creator != null">
                    and edit_status = #{editStatus}  and t.creator = #{creator}
                </if>
                <if test=" editStatus == 20">
                    and edit_status = #{editStatus}
                </if>
            </if>
            <if test="ticketStatus != null and ticketStatus >-1">
                <if test=" ticketStatus != 19">
                    <if test="type ==null or type==''">
                        and ticket_status = #{ticketStatus} and is_merge is null
                    </if>
                    <if test="type !=null and type!=''">
                        <if test="type=='dispatch'">
                            and dispatch_status= #{ticketStatus} and pid is null
                        </if>
                        <if test="type == 'acceptance'">
                            and accept_status = #{ticketStatus} and pid is null
                        </if>
                    </if>
                </if>
            </if>
            <if test="ticketStatusList != null and ticketStatusList.size >0">
                    <if test="type ==null or type==''">
                        and ticket_status in
                        <foreach collection="ticketStatusList" item="item" separator="," open="(" close=")" >
                            #{item}
                        </foreach>

                        and is_merge is null
                    </if>
                    <if test="type !=null and type!=''">
                        <if test="type=='dispatch'">
                            and dispatch_status in
                            <foreach collection="ticketStatusList" item="item" separator="," open="(" close=")" >
                                #{item}
                            </foreach>
                             and pid is null
                        </if>
                        <if test="type == 'acceptance'">
                            and accept_status  in
                            <foreach collection="ticketStatusList" item="item" separator="," open="(" close=")" >
                                #{item}
                            </foreach>
                             and pid is null
                        </if>
                    </if>

            </if>
            <if test="ticketStatus != null or ticketStatus == -1 ">
                <if test="type ==null or type==''">
                    and is_merge is null
                </if>
            </if>

            <if test="startDate !=null and startDate != '' and  endDate !=null and  endDate !=''">
                and t.create_time between #{startDate} and #{endDate}
            </if>
            <if test="startDispatchTime !=null and startDispatchTime != '' and  endDispatchTime !=null and  endDispatchTime !=''">
                and t.dispatch_time between #{startDispatchTime} and #{endDispatchTime}
            </if>
            <if test="startAcceptTime !=null and startAcceptTime != '' and  endAcceptTime !=null and  endAcceptTime !=''">
                and t.accept_time between #{startAcceptTime} and #{endAcceptTime}
            </if>
            <if test="issueSourceList != null and issueSourceList.size >0">
                and issue_source in
                <foreach collection="issueSourceList" item="issueSource" separator="," open="(" close=")" >
                    #{issueSource}
                </foreach>
            </if>
            <if test="deviceTypeList != null and deviceTypeList.size >0">
                and device_type in
                <foreach collection="deviceTypeList" item="deviceType" separator="," open="(" close=")" >
                    #{deviceType}
                </foreach>
            </if>
            <if test="type !=null and type!=''">
                <if test="type=='dispatch'">
                    and dispatch_status > 1 and pid is null
                </if>
                <if test="type == 'acceptance'">
                    and accept_status > 1 and pid is null
                </if>
            </if>
            <if test="pointName !=null and pointName !=''">
                and (select dp.point_name from device_point dp where  dp.id =(select point_id from ticket_point tp where t.id = tp.ticket_id  limit 1 )) like CONCAT('%',#{pointName},'%')
            </if>
            <if test="permSql !=null and permSql !=''">
                ${permSql}
            </if>
        </where>
        <if test="sortName !=null and sortName!=''">
            order by  ${sortName}
            <if test="sortOrder !=null and  sortOrder!=''">
                    ${sortOrder}
            </if>
        </if>
        <if test="sortName == '' or sortName == null">
            order by t.create_time desc
        </if>

    </select>


    <select id="queryAppAll" resultType="com.zans.mms.vo.ticket.TicketSearchRespVO">
        select
        t.id, ticket_code,ticket_code_result,ticket_type, t.area_id, t.device_type, issue_type, issue_level, issue_source,
        DATE_FORMAT(t.predict_arrive_time,'%Y-%m-%d %H:%i:%s') AS predict_arrive_time,
        DATE_FORMAT(t.predict_complete_time,'%Y-%m-%d %H:%i:%s') AS predict_complete_time,
        DATE_FORMAT(t.practical_arrive_time,'%Y-%m-%d %H:%i:%s') AS practical_arrive_time,
        DATE_FORMAT(t.practical_complete_time,'%Y-%m-%d %H:%i:%s') AS practical_complete_time,
        t.remark, t.creator,t.pid,
        DATE_FORMAT(t.create_time,'%Y-%m-%d %H:%i:%s') AS create_time,
        TIMESTAMPDIFF(HOUR, NOW(), t.predict_complete_time) AS remainingTime,
        t.ticket_status,t.maintenance_status,t.accept_status,t.dispatch_status,
        case when  practical_arrive_time is null then 0 else  1 end as isClockIn,
        (select point_id from ticket_point tp where t.id = tp.ticket_id  order by id asc   limit 1 ) as point_id,
        dp.point_name,
        (select floor(st_distance (gis, point(#{longitude},#{latitude})) * 111195)  as dist   from device_point dp where point_id = dp.id  ) as distance
        from ticket t
        left join device_point dp on dp.id= (select point_id from ticket_point tp where t.id = tp.ticket_id  order by id asc   limit 1 )
        <where>
            and t.edit_status = 20
            and t.is_merge is null
            <if test="searchLike != null and searchLike != ''">
                and (t.ticket_code like   CONCAT('%',#{searchLike},'%') or dp.point_name like  CONCAT('%',#{searchLike},'%') )
            </if>
            <if test="ticketType != null">
                and ticket_type = #{ticketType}
            </if>
            <if test="singleAreaId != null and singleAreaId != ''">
                and t.area_id = #{singleAreaId}
            </if>
            <if test="areaId != null and areaId.size > 0">
                and t.area_id in
                <foreach collection="areaId" item="areaid" separator="," open="(" close=")" >
                    #{areaid}
                </foreach>
            </if>
            <if test="maintenanceStatus != null and maintenanceStatus >-1">
                and maintenance_status = #{maintenanceStatus}
            </if>

            <if test="ticketStatus != null and ticketStatus >-1">
                and ticket_status = #{ticketStatus}
            </if>

            <if test="deviceType != null and deviceType != ''">
                and t.device_type = #{deviceType}
            </if>

            <if test="issueType != null">
                and issue_type = #{issueType}
            </if>

            <if test="startDate !=null and startDate != '' and  endDate !=null and  endDate !=''">
                and t.create_time between #{startDate} and #{endDate}
            </if>

            <if test="permSql !=null and permSql !=''">
                ${permSql}
            </if>


        </where>
        order by  ${sortName}   ${sortOrder}
    </select>


    <select id="queryTicketsDispatchViewById" resultMap="TicketDispatchViewMap" >
        select
            t.id,
            t.ticket_code,
            ticket_code_result,
            t.ticket_type,
            t.device_type,
            t.area_id,
            t.issue_type,
            t.issue_level,
            t.issue_source,
            t.apply_contact,
            t.apply_phone,
            t.duty_contact,
            t.predict_cost,
            t.accept_adjust_cost,
            t.alloc_department_num,
            t.maintenance_status,
            t.ticket_status,
            t.dispatch_status,
            t.accept_status,
            t.adjunct_id,
            t.patrol_check_result_id,
            t.deal_way,
            t.is_merge,
            t.pid,
            t.mark,
            t.remark,
            t.creator,
            (select point_id from ticket_point tp where t.id = tp.ticket_id  order by id asc   limit 1 ) as point_id,
               (select dp.point_name   from device_point dp where point_id = dp.id  ) as point_name,
               (select wsm.business_status_name   from workflow_state_mapping wsm where wsm.business_status_code = t.dispatch_status and wsm.workflow_id = 'dispatch'  ) as dispatchStatusName ,
               (select wsm.business_status_name   from workflow_state_mapping wsm where wsm.business_status_code = t.accept_status and wsm.workflow_id = 'acceptance'  ) as acceptStatusName ,
               bmf.id as fid,
               bmf.device_code,
               bmf.device_name,
               bmf.device_model,
               bmf.device_spec,
               bmf.device_price,
               bmf.device_brand,
               td.amount,
               td.predict_price,
               bv.id as adjId,
			   bv.raw_file_path,
			   bv.thumbnail_file_path,
			   bv.content_type,
         IFNULL( DATE_FORMAT(t.dispatch_time,'%Y-%m-%d %H:%i:%s'), DATE_FORMAT(t.create_time,'%Y-%m-%d %H:%i:%s')) as dispatch_time,
        DATE_FORMAT(t.create_time,'%Y-%m-%d %H:%i:%s') as create_time
        from ticket t
            left join ticket_detail td on t.id = td.ticket_id
            left join base_maintaion_facility bmf on td.facility_id = bmf.id
            LEFT JOIN base_vfs bv ON t.adjunct_id = bv.adjunct_id
        where t.id = #{ticketId}
        order by bv.sort asc,bv.id asc
    </select>


    <select id="queryTicketsAcceptViewById" resultMap="TicketAcceptViewMap">
        select
            t.id,
            t.ticket_code,
            t.ticket_code_result,
            t.ticket_type,
            t.device_type,
            t.area_id,
            t.issue_type,
            t.issue_level,
            t.issue_source,
            t.apply_contact,
            t.duty_contact,
            t.apply_phone,
            t.predict_cost,
            t.accept_predict_cost,
            t.accept_adjust_cost,
            t.alloc_department_num,
            t.patrol_check_result_id,
            t.deal_way,
            t.creator,
            t.ticket_status,
            t.dispatch_status,
            t.accept_status,
            t.is_merge,
            t.pid,
            t.mark,
            t.remark,
            t.accept_adjunct_id,
            (select point_id from ticket_point tp where t.id = tp.ticket_id  order by id asc   limit 1 ) as point_id,
            (select dp.point_name   from device_point dp where point_id = dp.id  ) as point_name,
            (select wsm.business_status_name   from workflow_state_mapping wsm where wsm.business_status_code = t.dispatch_status and wsm.workflow_id = 'dispatch'  ) as dispatchStatusName ,
            (select wsm.business_status_name   from workflow_state_mapping wsm where wsm.business_status_code = t.accept_status and wsm.workflow_id = 'acceptance'  ) as acceptStatusName ,
            bmf.id as fid,
            bmf.device_code,
            bmf.device_name,
            bmf.device_model,
            bmf.device_spec,
            bmf.device_price,
            td.amount,
            td.adj_amount,
            td.predict_price,
            td.adjust_price,
            bv.id as adjId,
            bv.raw_file_path,
            bv.thumbnail_file_path,
            bv.content_type,
            t.acceptance_instructions,
            IFNULL( DATE_FORMAT(t.dispatch_time,'%Y-%m-%d %H:%i:%s'), DATE_FORMAT(t.create_time,'%Y-%m-%d %H:%i:%s')) as dispatch_time,
            IFNULL( DATE_FORMAT(t.accept_time,'%Y-%m-%d %H:%i:%s'), DATE_FORMAT(t.create_time,'%Y-%m-%d %H:%i:%s')) as accept_time,
         DATE_FORMAT(t.create_time,'%Y-%m-%d %H:%i:%s') as create_time
        from ticket t
            left join ticket_detail td on t.id = td.ticket_id
            left join base_maintaion_facility bmf on td.facility_id = bmf.id
            LEFT JOIN base_vfs bv ON t.accept_adjunct_id = bv.adjunct_id
        where t.id = #{ticketId}
        order by bv.sort asc,bv.id asc
    </select>


    <select id="queryTicketById" resultType="com.zans.mms.vo.ticket.TicketBaseMfRespVO">
        select
        bmf.id,
        bmf.device_code,
        bmf.device_name,
        bmf.device_model,
        bmf.device_spec,
        bmf.device_price,
        bmf.device_brand,
        td.is_adj,
        td.amount,
        td.adj_amount,
        td.predict_price,
        td.adjust_price
        from  ticket_detail td
        left join base_maintaion_facility bmf on td.facility_id = bmf.id
        where td.ticket_id = #{ticketId}
        <if test="type != null">
            and td.type = #{type}
        </if>
    </select>

    <select id="queryDraftByUser" resultType="java.lang.Integer">
        select count(1) as count from ticket t
        where t.edit_status =1 and  t.creator = #{user}
    </select>


    <insert id="create" keyProperty="id" useGeneratedKeys="true">
        insert into ticket(ticket_code,ticket_code_result,creator)
        values (#{ticketCode},#{ticketCodeResult},#{creator})
    </insert>

    <insert id="appSave" keyProperty="id" useGeneratedKeys="true">
        insert into ticket(ticket_code,ticket_code_result,ticket_type, area_id, device_type, issue_type, issue_source,
                           ticket_status, edit_status,apply_contact,apply_phone,duty_contact,op_platform,
                           adjunct_id,is_cost, remark, creator)
        values (#{ticketCode},#{ticketCodeResult},#{ticketType}, #{areaId}, #{deviceType}, #{issueType},#{issueSource},
                #{ticketStatus}, #{editStatus},#{applyContact},#{applyPhone},#{dutyContact},#{opPlatform},
                #{adjunctId}, #{isCost}, #{remark},#{creator})

    </insert>

    <!--新增所有列-->
    <insert id="insert" keyProperty="id" useGeneratedKeys="true">
        insert into ticket(ticket_code,ticket_code_result,ticket_type, area_id, device_type, issue_type, issue_level,issue_source,edit_status,
                           ticket_status, dispatch_status,accept_status,op_platform,duty_contact,
                              apply_contact, apply_phone, occurred_time, alloc_department_num, predict_arrive_time, predict_complete_time,
                           predict_arrive, predict_complete, adjunct_id,is_cost, remark, creator, is_merge,import_num)
        values (#{ticketCode},#{ticketCodeResult}, #{ticketType}, #{areaId}, #{deviceType}, #{issueType}, #{issueLevel}, #{issueSource},#{editStatus},
                #{ticketStatus}, #{dispatchStatus}, #{acceptStatus},#{opPlatform},#{dutyContact},
                #{applyContact}, #{applyPhone}, #{occurredTime},  #{allocDepartmentNum}, #{predictArriveTime}, #{predictCompleteTime},
                #{predictArrive}, #{predictComplete}, #{adjunctId}, #{isCost}, #{remark},#{creator},#{isMerge},#{importNum})
    </insert>

    <insert id="insertBatch" keyProperty="id" useGeneratedKeys="true">
        insert into ticket(ticket_code,ticket_code_result,ticket_type, area_id, device_type, issue_type, issue_level,
        issue_source,    apply_contact, apply_phone, occurred_time, predict_cost, accept_predict_cost,
        accept_adjust_cost, alloc_department_num, predict_arrive_time, predict_complete_time, practical_arrive_time,
        practical_complete_time, practical_issue_type, adjunct_id, accept_adjunct_id, ticket_status, dispatch_status,
        accept_status, is_cost, remark, creator, create_time, update_time)
        values
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.ticketCode},#{entity.ticketCodeResult}, #{entity.ticketType}, #{entity.areaId}, #{entity.deviceType}, #{entity.issueType},
            #{entity.issueLevel}, #{entity.issueSource},  #{entity.applyContact},
            #{entity.applyPhone}, #{entity.occurredTime}, #{entity.predictCost}, #{entity.acceptPredictCost},
            #{entity.acceptAdjustCost}, #{entity.allocDepartmentNum}, #{entity.predictArriveTime},
            #{entity.predictCompleteTime}, #{entity.practicalArriveTime}, #{entity.practicalCompleteTime},
            #{entity.practicalIssueType}, #{entity.adjunctId}, #{entity.acceptAdjunctId}, #{entity.ticketStatus},
            #{entity.dispatchStatus}, #{entity.acceptStatus}, #{entity.isCost}, #{entity.remark}, #{entity.creator},
            #{entity.createTime}, #{entity.updateTime})
        </foreach>
    </insert>

    <insert id="insertOrUpdateBatch" keyProperty="id" useGeneratedKeys="true">
        insert into ticket(ticket_code,ticket_code_result,ticket_type, area_id, device_type, issue_type, issue_level,
        issue_source,    apply_contact, apply_phone, occurred_time, predict_cost, accept_predict_cost,
        accept_adjust_cost, alloc_department_num, predict_arrive_time, predict_complete_time, practical_arrive_time,
        practical_complete_time, practical_issue_type, adjunct_id, accept_adjunct_id, ticket_status, dispatch_status,
        accept_status, is_cost, remark, creator, create_time, update_time)
        values
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.ticketCode},#{entity.ticketCodeResult},#{entity.ticketType}, #{entity.areaId}, #{entity.deviceType}, #{entity.issueType},
            #{entity.issueLevel}, #{entity.issueSource},  #{entity.applyContact},
            #{entity.applyPhone}, #{entity.occurredTime}, #{entity.predictCost}, #{entity.acceptPredictCost},
            #{entity.acceptAdjustCost}, #{entity.allocDepartmentNum}, #{entity.predictArriveTime},
            #{entity.predictCompleteTime}, #{entity.practicalArriveTime}, #{entity.practicalCompleteTime},
            #{entity.practicalIssueType}, #{entity.adjunctId}, #{entity.acceptAdjunctId}, #{entity.ticketStatus},
            #{entity.dispatchStatus}, #{entity.acceptStatus}, #{entity.isCost}, #{entity.remark}, #{entity.creator},
            #{entity.createTime}, #{entity.updateTime})
        </foreach>
        on duplicate key update
        ticket_code = values(ticket_code) ,ticket_code_result = values(ticket_code_result), ticket_type = values(ticket_type) , area_id = values(area_id) , device_type
        = values(device_type) , issue_type = values(issue_type) , issue_level = values(issue_level) , issue_source =
        values(issue_source) , apply_contact = values(apply_contact) , apply_phone
        = values(apply_phone) , occurred_time = values(occurred_time) , predict_cost = values(predict_cost) ,
        accept_predict_cost = values(accept_predict_cost) , accept_adjust_cost = values(accept_adjust_cost) ,
        alloc_department_num = values(alloc_department_num) , predict_arrive_time = values(predict_arrive_time) ,
        predict_complete_time = values(predict_complete_time) , practical_arrive_time = values(practical_arrive_time) ,
        practical_complete_time = values(practical_complete_time) , practical_issue_type = values(practical_issue_type)
        , adjunct_id = values(adjunct_id) , accept_adjunct_id = values(accept_adjunct_id) , ticket_status =
        values(ticket_status) , dispatch_status = values(dispatch_status) , accept_status = values(accept_status) ,
        is_cost = values(is_cost) , remark = values(remark) , creator = values(creator) , create_time =
        values(create_time) , update_time = values(update_time)
    </insert>
    <insert id="insertScreen">
        insert into (`type`,items,items_values,creator)
        values (#{type},#{items},#{itemsValues},#{creator})
    </insert>



    <!--通过主键修改数据-->
    <update id="update">
        update ticket
        <set>
            <if test="ticketCode != null and ticketCode != ''">
                ticket_code = #{ticketCode},
            </if>
            <if test="ticketCodeResult != null and ticketCodeResult != ''">
                ticket_code_result = #{ticketCodeResult},
            </if>
            <if test="ticketType != null">
                ticket_type = #{ticketType},
            </if>
            <if test="areaId != null and areaId != ''">
                area_id = #{areaId},
            </if>
            <if test="deviceType != null and deviceType != ''">
                device_type = #{deviceType},
            </if>
            <if test="issueType != null">
                issue_type = #{issueType},
            </if>
            <if test="issueLevel != null">
                issue_level = #{issueLevel},
            </if>
            <if test="issueSource != null">
                issue_source = #{issueSource},
            </if>
            <if test="applyContact != null and applyContact != ''">
                apply_contact = #{applyContact},
            </if>

            <if test="dutyContact != null and dutyContact != ''">
                duty_contact = #{dutyContact},
            </if>
            <if test="applyPhone != null and applyPhone != ''">
                apply_phone = #{applyPhone},
            </if>
            <if test="occurredTime != null">
                occurred_time = #{occurredTime},
            </if>
            <if test="predictArrive != null">
                predict_arrive = #{predictArrive},
            </if>
            <if test="predictComplete != null">
                predict_complete = #{predictComplete},
            </if>

            <if test="predictCost != null">
                predict_cost = #{predictCost},
            </if>
            <if test="acceptPredictCost != null">
                accept_predict_cost = #{acceptPredictCost},
            </if>
            <if test="acceptAdjustCost != null">
                accept_adjust_cost = #{acceptAdjustCost},
            </if>
            <if test="allocDepartmentNum != null and allocDepartmentNum != ''">
                alloc_department_num = #{allocDepartmentNum},
            </if>
            <if test="predictArriveTime != null">
                predict_arrive_time = #{predictArriveTime},
            </if>
            <if test="predictCompleteTime != null">
                predict_complete_time = #{predictCompleteTime},
            </if>
            <if test="practicalArriveTime != null">
                practical_arrive_time = #{practicalArriveTime},
            </if>
            <if test="practicalCompleteTime != null">
                practical_complete_time = #{practicalCompleteTime},
            </if>
            <if test="practicalIssueType != null">
                practical_issue_type = #{practicalIssueType},
            </if>
            <if test="adjunctId != null and adjunctId != ''">
                adjunct_id = #{adjunctId},
            </if>
            <if test="acceptAdjunctId != null and acceptAdjunctId != ''">
                accept_adjunct_id = #{acceptAdjunctId},
            </if>
            <if test="ticketStatus != null">
                ticket_status = #{ticketStatus},
            </if>
            <if test="dispatchStatus != null">
                dispatch_status = #{dispatchStatus},
            </if>
            <if test="acceptStatus != null">
                accept_status = #{acceptStatus},
            </if>
            <if test="maintenanceStatus != null">
                maintenance_status = #{maintenanceStatus},
            </if>
            <if test="editStatus != null">
                edit_status = #{editStatus},
            </if>
            <if test="isCost != null">
                is_cost = #{isCost},
            </if>
            <if test="remark != null and remark != ''">
                remark = #{remark},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime},
            </if>
            <if test="dispatchTime != null and dispatchTime != ''">
                dispatch_time = #{dispatchTime},
            </if>
            <if test="acceptTime != null and acceptTime != ''">
                accept_time = #{acceptTime},
            </if>
            <if test="uploadPointName != null and uploadPointName != ''">
                upload_point_name = #{uploadPointName},
            </if>
            <if test="dealWay != null and dealWay != ''">
                deal_way = #{dealWay},
            </if>
            <if test="acceptanceInstructions !=null and acceptanceInstructions!=''">
                acceptance_instructions = #{acceptanceInstructions}
            </if>
        </set>
        where id = #{id}
    </update>
    <update id="updateAcceptanceStatusName">
        update ticket set back_acceptance_role_name = #{name}
            where id=#{id}
    </update>
    <update id="updateDispatchStatusName">
        update ticket set back_dispatch_role_name = #{name}
        where id=#{id}
    </update>
    <update id="updateBase" parameterType="com.zans.mms.model.Ticket">
        update ticket
        <set>
            <if test="ticketType != null">
                ticket_type = #{ticketType},
            </if>
            <if test="areaId != null and areaId != ''">
                area_id = #{areaId},
            </if>
            <if test="deviceType != null and deviceType != ''">
                device_type = #{deviceType},
            </if>
            <if test="issueType != null">
                issue_type = #{issueType},
            </if>
            <if test="issueSource != null">
                issue_source = #{issueSource},
            </if>
            <if test="dealWay != null">
                deal_way = #{dealWay},
            </if>
            <if test="applyContact != null and applyContact != ''">
                apply_contact = #{applyContact},
            </if>
            <if test="applyPhone != null and applyPhone != ''">
                apply_phone = #{applyPhone},
            </if>
            <if test="occurredTime != null">
                occurred_time = #{occurredTime},
            </if>
            <if test="remark != null and remark != ''">
                remark = #{remark},
            </if>
            <if test="practicalIssueType !=null and practicalIssueType!=''">
                practical_issue_type=#{practicalIssueType},
            </if>
            <if test="mark != null">
                mark = #{mark}
            </if>
        </set>
        where id = #{id}
    </update>
    <update id="updateScreen">
        update screen  set

                items = #{items},items_values= #{itemsValues}

        where `type`=#{type} and creator = #{creator}
    </update>
    <update id="clearBackRecord">
        update ticket
        <set>
            <if test="type!=null and type !='' and type=='dispatch'">
                back_dispatch_role_name = null
            </if>
            <if test="type!=null and type !='' and type=='acceptance'">
                back_acceptance_role_name = null
            </if>
        </set>
        where id= #{id}
    </update>
    <update id="updatePid">
        update ticket set pid = #{pid} where id = #{id}
    </update>
    <update id="clearPid">
        update ticket set pid = null where id = #{id}
    </update>
    <update id="clearIsMerge">
        update ticket set is_merge = null where id = #{id}
    </update>
    <update id="complete">
        update ticket set edit_status=20 where id = #{id}
    </update>
    <update id="completeAll">
        update ticket set edit_status=20 where edit_status=1 and creator=#{username}
    </update>
    <update id="updateImport">
        update ticket 
        <set>
            <if test="deviceType !=null and deviceType != ''">
                device_type = #{deviceType},
            </if>
            <if test="areaId !=null and areaId != ''">
                area_id = #{areaId},
            </if>
            <if test="issueSource !=null and issueSource != ''">
                issue_source = #{issueSource},
            </if>
            <if test="issueType !=null and issueType != ''">
                issue_type = #{issueType},
            </if>
            <if test="issueLevel !=null and issueLevel != ''">
                issue_level = #{issueLevel},
            </if>
            <if test="allocDepartmentNum !=null and allocDepartmentNum != ''">
                alloc_department_num = #{allocDepartmentNum},
            </if>
        </set>
        <where>
           id = #{id}
        </where>
    </update>

    <update id="relationPatrolTaskCheckResult">
        update ticket set patrol_check_result_id = #{resultId} where id = #{id}
    </update>
    <update id="relationPoManager">
        update ticket set po_id = #{poId} where id = #{id}
    </update>
    <update id="maintainApprovedTime">
        update ticket
        <set>
            <if test="dispatchApprovalTime !=null and dispatchApprovalTime !=''">
                dispatch_approval_time = #{dispatchApprovalTime},
            </if>
            <if test="acceptApprovalTime !=null and acceptApprovalTime !=''">
                accept_approval_time = #{acceptApprovalTime}
            </if>
        </set>
        where id = #{id}
    </update>
    <!--通过主键删除-->
    <delete id="deleteById">
        delete
        from ticket
        where id = #{id}
    </delete>


    <select id="getPcTicketTotal" resultType="com.zans.mms.vo.chart.CircleUnit">
        SELECT COUNT(1) AS val,'total' AS NAME ,'总数' AS chineName
        FROM ticket t
        WHERE  t.`edit_status` = 20  and  t.ticket_status >0 and t.is_merge is null
        <if test="dataPerm != null  and dataPerm == 2">
            and (t.alloc_department_num = #{orgId} )
        </if>

        UNION ALL
        SELECT COUNT(1) AS val,'suc' AS NAME ,'已完成' AS chineName
        FROM ticket t
        WHERE t.ticket_status = 20 and t.`edit_status` = 20 and t.is_merge is null
        <if test="dataPerm != null  and dataPerm == 2">
            and (t.alloc_department_num = #{orgId} )
        </if>
        UNION ALL
        SELECT sum(t.accept_adjust_cost) AS val,'adjustCost' AS NAME ,'总金额' AS chineName
        FROM ticket t
        where   t.ticket_status = 20 and t.`edit_status` = 20 and t.is_merge is null
        <if test="dataPerm != null  and dataPerm == 2">
            and (t.alloc_department_num = #{orgId} )
        </if>

    </select>

    <select id="getAppTicketTotal" resultType="com.zans.mms.vo.chart.CircleUnit">
        SELECT COUNT(1) AS val,'upcoming' AS NAME ,'待办' AS chineName
        FROM ticket t
        WHERE t.`maintenance_status` != 20 and t.`edit_status` = 20 and  t.ticket_status >0 and t.is_merge is null
        <if test="dataPerm != null  and dataPerm == 2">
            and (t.alloc_department_num = #{orgId} )
        </if>
        UNION ALL
        SELECT COUNT(1) AS val,'unClockIn' AS NAME ,'待打卡' AS chineName
        FROM ticket t
        WHERE t.`maintenance_status` = 0 and t.`edit_status` = 20 and  t.ticket_status >0 and t.practical_arrive_time is null and t.is_merge is null
        <if test="dataPerm != null  and dataPerm == 2">
            and (t.alloc_department_num = #{orgId} )
        </if>
        UNION ALL
        SELECT COUNT(1) AS val,'nearExpired' AS NAME ,'接近超时' AS chineName
        FROM ticket t
        WHERE  TIMESTAMPDIFF(HOUR, NOW(), t.predict_complete_time) <![CDATA[<=]]> 1
        and   TIMESTAMPDIFF(HOUR, NOW(), t.predict_complete_time) >= 0  and  t.ticket_status >0
        and t.is_merge is null
        <if test="dataPerm != null  and dataPerm == 2">
            and (t.alloc_department_num = #{orgId} )
        </if>
    </select>


    <resultMap type="com.zans.mms.vo.ticket.TicketsDispatchPdfVO" id="TicketsDispatchPdfVOMap">
        <result property="ticketCode" column="ticket_code" jdbcType="VARCHAR"/>
        <result property="ticketCodeResult" column="ticket_code_result" jdbcType="VARCHAR"/>
        <result property="id" column="id" jdbcType="INTEGER"/>
        <result property="areaName" column="area_name" jdbcType="VARCHAR"/>
        <result property="createTime" column="create_time" jdbcType="VARCHAR"/>
        <result property="deviceTypeName" column="type_name" jdbcType="VARCHAR"/>
        <result property="issueSource" column="issue_source" jdbcType="VARCHAR"/>
        <result property="dutyContact" column="duty_contact" jdbcType="VARCHAR"/>
        <result property="applyContact" column="apply_contact" jdbcType="VARCHAR"/>
        <result property="predictCost" column="predict_cost" jdbcType="VARCHAR"/>
        <result property="adjustCost" column="accept_adjust_cost" jdbcType="VARCHAR"/>
        <result property="acceptPredictCost" column="accept_predict_cost" jdbcType="VARCHAR"/>
        <result property="dispatchStatus" column="dispatch_status" jdbcType="INTEGER"/>
        <result property="acceptStatus" column="accept_status" jdbcType="INTEGER"/>
        <result property="orgName" column="org_name" jdbcType="VARCHAR"/>
        <result property="remark" column="remark" jdbcType="VARCHAR"/>
        <result property="pointName" column="point_name" jdbcType="VARCHAR"/>
        <result property="dispatchTime" column="dispatch_time" jdbcType="VARCHAR"/>
        <result property="acceptTime" column="accept_time" jdbcType="VARCHAR"/>
        <result property="acceptanceInstructions" column="acceptance_instructions" jdbcType="VARCHAR"/>
        <result property="isMerge" column="is_merge" jdbcType="INTEGER"/>
        <collection property="baseMfPdfRespVOList" javaType="arraylist" ofType="com.zans.mms.vo.ticket.TicketBaseMfRespVO">
            <result property="id" column="fid" ></result>
            <result property="deviceCode" column="device_code" ></result>
            <result property="deviceName" column="device_name" ></result>
            <result property="devicePrice" column="device_price" ></result>
            <result property="deviceModel" column="device_model" ></result>
            <result property="deviceSpec" column="device_spec" ></result>
            <result property="deviceBrand" column="device_brand" ></result>
            <result property="amount" column="amount" ></result>
            <result property="predictPrice" column="predict_price" ></result>
        </collection>
    </resultMap>

    <select id="queryTicketsDispatchPdfByCode" resultMap="TicketsDispatchPdfVOMap">
      select
               t.id,
               t.ticket_code,
               t.ticket_code_result,
               t.dispatch_status,
               t.accept_status,
			   DATE_FORMAT(t.create_time,'%Y-%m-%d')  create_time,
			   bdt.type_name,
			   ba.area_name,
               t.duty_contact,
               t.predict_cost,
               t.accept_adjust_cost,
               t.apply_contact,
			   bo.org_name,
               t.is_merge,
               t.remark,
               sci.item_value as issue_source,
               (select point_id from ticket_point tp where t.id = tp.ticket_id  order by id asc   limit 1 ) as point_id,
               (select dp.point_name   from device_point dp where point_id = dp.id  ) as point_name,
               bmf.id as fid,
               bmf.device_code,
               bmf.device_name,
               bmf.device_model,
               bmf.device_spec,
               bmf.device_price,  -- 综合单价
               bmf.device_brand,
               td.amount,
               t.acceptance_instructions,
               td.predict_price, -- 预算金额
               t.accept_predict_cost,
               IFNULL( DATE_FORMAT(t.dispatch_time,'%Y-%m-%d'), DATE_FORMAT(t.create_time,'%Y-%m-%d')) as dispatch_time,
               IFNULL( DATE_FORMAT(t.accept_time,'%Y-%m-%d'), DATE_FORMAT(t.create_time,'%Y-%m-%d')) as accept_time
        from ticket t
        left join ticket_detail td on t.id = td.ticket_id
        left join base_maintaion_facility bmf on td.facility_id = bmf.id
				left join base_device_type bdt on bdt.type_id=t.device_type
				left join base_area ba on ba.area_id = t.area_id
				LEFT JOIN base_org bo on bo.org_id = t.alloc_department_num
				LEFT JOIN sys_constant_item sci on sci.dict_key='issue_source' and sci.item_key=t.issue_source
        where t.ticket_code = #{ticketCode} and t.edit_status=20;
    </select>

    <select id="statisticsByFaultType" resultType="com.zans.mms.vo.ticket.TicketByFaultTypeVO">
        SELECT
            a.fault_name as faultName,
            a.totalCount,
            b.monthCount
        FROM
            (
                SELECT
                    type.fault_name,
                    count( * ) AS totalCount
                FROM
                    ticket t
                        LEFT JOIN base_fault_type type ON t.issue_type = type.fault_id
                WHERE
                    edit_status = 20
                GROUP BY
                    type.fault_name
            ) a
                LEFT JOIN (
                SELECT
                    type.fault_name,
                    count( * ) AS monthCount
                FROM
                    ticket t
                        LEFT JOIN base_fault_type type ON t.issue_type = type.fault_id
                WHERE
                    edit_status = 20
                  AND t.create_time >= ( SELECT DATE_SUB( CURDATE( ), INTERVAL 1 MONTH ) )
                GROUP BY
                    type.fault_name
            ) b ON a.fault_name = b.fault_name
    </select>
    <select id="ticketStatistics" resultType="com.zans.mms.vo.ticket.TicketCountVO">
        SELECT
            a.org_name AS orgName,
            a.totalCount,
            b.monthCount,
            c.completeCount,
            d.arriveTimeCount,
            e.completeTimeCount,
            f.notCompleteCount,
            g.overTimeCount
        FROM
            (
                SELECT
                    org_name,
                    count( * ) AS totalCount
                FROM
                    ticket t
                        LEFT JOIN base_org org ON t.alloc_department_num = org.org_id
                WHERE
                    edit_status = 20
                  AND org_name IS NOT NULL
                GROUP BY
                    org_name
            ) a
                LEFT JOIN (
                SELECT
                    org_name,
                    count( * ) AS monthCount
                FROM
                    ticket t
                        LEFT JOIN base_org org ON t.alloc_department_num = org.org_id
                WHERE
                    edit_status = 20
                  AND org_name IS NOT NULL
                  AND t.create_time >= ( SELECT DATE_SUB( CURDATE( ), INTERVAL 1 MONTH ) )
                GROUP BY
                    org_name
            ) b ON a.org_name = b.org_name
                LEFT JOIN (
                SELECT
                    org_name,
                    count( * ) AS completeCount
                FROM
                    ticket t
                        LEFT JOIN base_org org ON t.alloc_department_num = org.org_id
                WHERE
                    ticket_status = 20
                  AND edit_status = 20
                GROUP BY
                    org_name
            ) c ON a.org_name = c.org_name
                LEFT JOIN (
                SELECT
                    org_name,
                    count( * ) AS arriveTimeCount
                FROM
                    ticket t
                        LEFT JOIN base_org org ON t.alloc_department_num = org.org_id
                WHERE
                    edit_status = 20
                  AND practical_arrive_time > predict_arrive_time
                GROUP BY
                    org_name
            ) d ON a.org_name = d.org_name
                LEFT JOIN (
                SELECT
                    org_name,
                    count( * ) AS completeTimeCount
                FROM
                    ticket t
                        LEFT JOIN base_org org ON t.alloc_department_num = org.org_id
                WHERE
                    edit_status = 20
                  AND practical_complete_time > predict_complete_time
                GROUP BY
                    org_name
            ) e ON a.org_name = e.org_name
                LEFT JOIN (
                SELECT
                    org_name,
                    count( * ) AS notCompleteCount
                FROM
                    ticket t
                        LEFT JOIN base_org org ON t.alloc_department_num = org.org_id
                WHERE
                    edit_status = 20
                  AND ticket_status != 20
	AND org_name IS NOT NULL
                GROUP BY
                    org_name
            ) f ON a.org_name = f.org_name
                LEFT JOIN (
                SELECT
                    org_name,
                    count( * ) AS overTimeCount
                FROM
                    ticket t
                        LEFT JOIN base_org org ON t.alloc_department_num = org.org_id
                WHERE
                    edit_status = 20
                  AND ticket_status != 20
	AND t.create_time >= now( ) - INTERVAL 3 DAY
	AND org_name IS NOT NULL
                GROUP BY
                    org_name
            ) g ON a.org_name = g.org_name
    </select>





    <select id="getPcFaultType" resultType="com.zans.mms.vo.chart.CountUnit">
        SELECT REPLACE(UUID(), "-", "") AS id,
               bft.fault_name     AS count_name,
               COUNT(1)  AS val
        FROM  ticket t
        LEFT JOIN base_fault_type bft ON t.issue_type = bft.fault_id
        WHERE t.edit_status = 20 and  t.ticket_status >0 and t.is_merge is null
        GROUP BY bft.fault_id
        ORDER BY val desc
    </select>

    <select id="getPcTicketSource" resultType="com.zans.mms.vo.chart.CountUnit">
        SELECT REPLACE(UUID(), "-", "") AS id,
               (SELECT  sci.item_value  FROM sys_constant_item sci WHERE  sci.dict_key='issue_source' AND sci.`item_key` = t.issue_source)   AS count_name,
               COUNT(1)  AS val
        FROM ticket t
        WHERE t.edit_status = 20 AND t.ticket_status >0 and t.is_merge is null
        GROUP BY t.issue_source
        order by val desc
    </select>


    <select id="getPcMaintainFacility" resultType="com.zans.mms.vo.chart.CircleUnit">
        SELECT  org.org_name   AS chineName,
               COUNT(1)  AS val
        FROM ticket t
        LEFT JOIN base_org org ON t.alloc_department_num = org.org_id
        WHERE t.edit_status = 20 and t.ticket_status >0 and t.is_merge is null
        GROUP BY org.org_id
        ORDER BY val desc
    </select>

    <select id="getById" resultType="com.zans.mms.dto.workflow.TicketWorkflowDto">
        SELECT
            ticket.id,
            ticket.ticket_code,
            ticket.ticket_code_result,
            ticket.ticket_type,
            ticket.area_id,
            ticket.device_type,
            ticket.issue_type,
            ticket.issue_level,
            ticket.issue_source,
            ticket.apply_contact,
            ticket.apply_phone,
            ticket.duty_contact,
            ticket.occurred_time,
            ticket.predict_cost,
            ticket.accept_predict_cost,
            ticket.accept_adjust_cost,
            ticket.alloc_department_num,
            ticket.predict_arrive_time,
            ticket.predict_complete_time,
            ticket.predict_arrive,
            ticket.predict_complete,
            ticket.practical_arrive_time,
            ticket.practical_complete_time,
            ticket.practical_issue_type,
            ticket.adjunct_id,
            ticket.accept_adjunct_id,
            ticket.edit_status,
            ticket.ticket_status,
            ticket.dispatch_status,
            ticket.accept_status,
            ticket.maintenance_status,
            ticket.back_dispatch_role_name,
            ticket.back_acceptance_role_name,
            ticket.is_cost,
            ticket.remark,
            ticket.creator,
            DATE_FORMAT(ticket.create_time,'%Y-%m-%d %H:%i:%s') create_time,
            ticket.update_time,
            ticket.is_merge,
            ticket.acceptance_instructions as acceptanceInstructions
        FROM
            ticket
        WHERE
            ticket.id = #{id}
    </select>
    <select id="getByIds" resultType="com.zans.mms.model.Ticket">
        SELECT
            ticket.id,
            ticket.ticket_code,
            ticket.ticket_code_result,
            ticket.ticket_type,
            ticket.area_id,
            ticket.device_type,
            ticket.issue_type,
            ticket.issue_level,
            ticket.issue_source,
            ticket.apply_contact,
            ticket.apply_phone,
            ticket.duty_contact,
            ticket.occurred_time,
            ticket.predict_cost,
            ticket.accept_predict_cost,
            ticket.accept_adjust_cost,
            ticket.alloc_department_num,
            ticket.predict_arrive_time,
            ticket.predict_complete_time,
            ticket.predict_arrive,
            ticket.predict_complete,
            ticket.practical_arrive_time,
            ticket.practical_complete_time,
            ticket.practical_issue_type,
            ticket.adjunct_id,
            ticket.accept_adjunct_id,
            ticket.edit_status,
            ticket.ticket_status,
            ticket.dispatch_status,
            ticket.accept_status,
            ticket.maintenance_status,
            ticket.is_cost,
            ticket.remark,
            ticket.creator,
            DATE_FORMAT(ticket.create_time,'%Y-%m-%d %H:%i:%s') create_time,
            ticket.update_time
        FROM
            ticket
        <where>
            <if test="ids != null and ids.size >0">
                ticket.id in
                <foreach collection="ids" item="id" separator="," open="(" close=")">
                    #{id}
                </foreach>
            </if>
        </where>
    </select>
    <select id="getScreen" resultType="com.zans.mms.model.Screen">
        select items,items_values from screen where `type`='ticket' and creator = #{userName} limit 1
    </select>
    <select id="isExist" resultType="java.lang.Integer">
        select count(*) from screen where creator = #{creator} and `type` = #{type}
    </select>
    <select id="isExistTicketCodeRsult" resultType="java.lang.Integer">
        select count(*) from ticket where ticket_code_result = #{ticketCodeResult} and id !=#{id}
            and edit_status=20
    </select>
    <select id="breakdownTicketBarChart" resultType="java.util.Map">

    </select>
    <select id="getBreakdownTicketTotal" resultType="java.lang.Integer">
        SELECT
        IFNULL(count(*),0) as val
        FROM
        ticket
        WHERE
        ticket_type = 1
        AND edit_status=20
        and alloc_department_num ='10001'
        and is_merge is null
        <if test="type!=null and type ==1">
            and   create_time BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR)
        </if>
        <if test="startTime != null and startTime !='' and endTime !=null and endTime!=''">
            and create_time BETWEEN #{startTime} and #{endTime}
        </if>
        UNION ALL
        SELECT
        IFNULL(count(*),0) as val
        FROM
        ticket
        WHERE
        ticket_type = 1
        AND edit_status=20
        and alloc_department_num ='10002'
        and is_merge is null
        <if test="type!=null and type ==1">
            and   create_time BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR)
        </if>
        <if test="startTime != null and startTime !='' and endTime !=null and endTime!=''">
            and create_time BETWEEN #{startTime} and #{endTime}
        </if>
        UNION ALL
        SELECT
        IFNULL(count(*),0) as val
        FROM
        ticket
        WHERE
        ticket_type = 1
        AND edit_status=20
        and alloc_department_num ='10003'
        and is_merge is null
        <if test="type!=null and type ==1">
            and   create_time BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR)
        </if>
        <if test="startTime != null and startTime !='' and endTime !=null and endTime!=''">
            and create_time BETWEEN #{startTime} and #{endTime}
        </if>
    </select>
    <select id="getBreakdownTicketComplete" resultType="java.lang.Integer">
        SELECT
        IFNULL(count(*),0) as val
        FROM
        ticket t
        LEFT  JOIN
        (SELECT
        tol.`ticket_id`,
        MAX(tol.create_time) AS create_time
        FROM
        ticket_op_logs tol
        WHERE tol.msg='工单#验收'
        GROUP BY tol.`ticket_id`) d
        ON t.`id` = d.ticket_id
        where
        ticket_type = 1
        AND (ticket_status=4 or ticket_status=20)
        AND edit_status=20
        and alloc_department_num ='10001'
        and is_merge is null
        <if test="type!=null and type ==1">
            and (practical_complete_time BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR)
                     or d.create_time BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR))
        </if>
        <if test="startTime != null and startTime !='' and endTime !=null and endTime!=''">
            and (practical_complete_time BETWEEN #{startTime} and #{endTime}
            or d.create_time BETWEEN #{startTime} and #{endTime})
        </if>
        UNION ALL
        SELECT
        IFNULL(count(*),0) as val
        FROM
        ticket t
        LEFT  JOIN
        (SELECT
        tol.`ticket_id`,
        MAX(tol.create_time) AS create_time
        FROM
        ticket_op_logs tol
        WHERE tol.msg='工单#验收'
        GROUP BY tol.`ticket_id`) d
        ON t.`id` = d.ticket_id
        where
        ticket_type = 1
        AND (ticket_status=4 or ticket_status=20)
        AND edit_status=20
        and alloc_department_num ='10002'
        and is_merge is null
        <if test="type!=null and type ==1">
            and (practical_complete_time BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR)
            or d.create_time BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR))
        </if>
        <if test="startTime != null and startTime !='' and endTime !=null and endTime!=''">
            and (practical_complete_time BETWEEN #{startTime} and #{endTime}
            or d.create_time BETWEEN #{startTime} and #{endTime})
        </if>
        UNION ALL
        SELECT
        IFNULL(count(*),0) as val
        FROM
        ticket t
        LEFT  JOIN
        (SELECT
        tol.`ticket_id`,
        MAX(tol.create_time) AS create_time
        FROM
        ticket_op_logs tol
        WHERE tol.msg='工单#验收'
        GROUP BY tol.`ticket_id`) d
        ON t.`id` = d.ticket_id
        where
        ticket_type = 1
        AND (ticket_status=4 or ticket_status=20)
        AND edit_status=20
        and alloc_department_num ='10003'
        and is_merge is null
        <if test="type!=null and type ==1">
            and (practical_complete_time BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR)
            or d.create_time BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR))
        </if>
        <if test="startTime != null and startTime !='' and endTime !=null and endTime!=''">
            and (practical_complete_time BETWEEN #{startTime} and #{endTime}
            or d.create_time BETWEEN #{startTime} and #{endTime})
        </if>
    </select>
    <select id="getBreakdownTicketCompleteNum" resultType="java.lang.Integer">
        SELECT
        IFNULL(count(*),0) as val
        FROM
        ticket
        WHERE
        ticket_type = 1
        AND (ticket_status=4 or ticket_status=20)
        AND edit_status=20
        and alloc_department_num ='10001'
        and is_merge is null
        <if test="type!=null and type ==1">
            and  create_time BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR)
        </if>
        <if test="startTime != null and startTime !='' and endTime !=null and endTime!=''">
            and create_time BETWEEN #{startTime} and #{endTime}
        </if>
        UNION ALL
        SELECT
        IFNULL(count(*),0) as val
        FROM
        ticket
        WHERE
        ticket_type = 1
        AND (ticket_status=4 or ticket_status=20)
        AND edit_status=20
        and alloc_department_num ='10002'
        and is_merge is null
        <if test="type!=null and type ==1">
            and   create_time BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR)
        </if>
        <if test="startTime != null and startTime !='' and endTime !=null and endTime!=''">
            and create_time BETWEEN #{startTime} and #{endTime}
        </if>
        UNION ALL
        SELECT
        IFNULL(count(*),0) as val
        FROM
        ticket
        WHERE
        ticket_type = 1
        AND (ticket_status=4 or ticket_status=20)
        AND edit_status=20
        and alloc_department_num ='10003'
        and is_merge is null
        <if test="type!=null and type ==1">
            and   create_time BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR)
        </if>
        <if test="startTime != null and startTime !='' and endTime !=null and endTime!=''">
            and create_time BETWEEN #{startTime} and #{endTime}
        </if>
    </select>
    <select id="breakdownTicketCompare" resultType="java.util.Map">
        SELECT
            (todayTotal - yesterDayTotal) as total,
            (todaycomplete-yesterDaycomplete) as complete,
            IFNULL((todayMtComplete/todayTotal),0)- IFNULL((yesterDayMtComplete/yesterDayTotal),0) as rate
        FROM
            (
                SELECT
                    sum(
                            IF
                                (
                                        ticket_type = 1
                                        AND edit_status = 20
                                        AND alloc_department_num = #{orgId}
                                        <if test="type!=null and type ==1">
                                        AND   t.create_time BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR),
                                        </if>
                                        <if test="startTime != null and startTime !='' and endTime !=null and endTime!=''">
                                            and t.create_time BETWEEN #{startTime} and #{endTime},
                                        </if>

                                        1,
                                        0
                                )
                        ) AS todayTotal,
                    sum(
                            IF
                                (
                                        ticket_type = 1
                                        AND edit_status = 20
                                        AND alloc_department_num =#{orgId}
                                    <if test="type!=null and type ==1">
                                         AND  t.create_time BETWEEN DATE_ADD(DATE_SUB(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR) and  DATE_ADD(CURDATE(), INTERVAL 0 HOUR),
                                    </if>
                                    <if test="beforeStartTime != null and beforeStartTime !='' and beforeEndTime !=null and beforeEndTime!=''">
                                        and t.create_time BETWEEN #{beforeStartTime} and #{beforeStartTime},
                                    </if>
                                        1,
                                        0
                                )
                        ) AS yesterDayTotal,
                    sum(
                            IF
                                (
                                        ticket_type = 1
                                        AND (ticket_status = 4 or ticket_status = 20)
                                        AND edit_status = 20
                                        AND alloc_department_num = #{orgId}
                                        <if test="type!=null and type ==1">
                                            and (practical_complete_time BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR)
                                            or d.create_time BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR)),
                                        </if>
                                        <if test="startTime != null and startTime !='' and endTime !=null and endTime!=''">
                                            and (practical_complete_time BETWEEN #{startTime} and #{endTime}
                                            or d.create_time BETWEEN #{startTime} and #{endTime}),
                                        </if>
                                        1,0
                                )
                        ) AS todaycomplete,
                    sum(
                            IF
                                (
                                        ticket_type = 1
                                        AND (ticket_status = 4 or ticket_status = 20)
                                        AND edit_status = 20
                                        AND alloc_department_num = #{orgId}
        <if test="type!=null and type ==1">
            and (practical_complete_time BETWEEN DATE_ADD(DATE_SUB(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR) and  DATE_ADD(CURDATE(), INTERVAL 0 HOUR)
            or d.create_time BETWEEN DATE_ADD(DATE_SUB(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR) and  DATE_ADD(CURDATE(), INTERVAL 0 HOUR)),
        </if>
        <if test="beforeStartTime != null and beforeStartTime !='' and beforeEndTime !=null and beforeEndTime!=''">
            and (practical_complete_time BETWEEN #{beforeStartTime} and #{beforeEndTime}
            or d.create_time BETWEEN #{beforeStartTime} and #{beforeEndTime}),
        </if>
                                        1,
                                        0
                                )
                        ) AS yesterDaycomplete,
                    sum(
                            IF
                                (
                                        ticket_type = 1
                                        AND (ticket_status = 4 or ticket_status = 20)
                                        AND edit_status = 20
                                        AND alloc_department_num = #{orgId}
        <if test="type!=null and type ==1">
            AND  practical_complete_time  BETWEEN DATE_ADD(DATE_SUB(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR) and  DATE_ADD(CURDATE(), INTERVAL 0 HOUR)
            AND DATEDIFF( practical_complete_time, t.create_time ) = 0,
        </if>
        <if test="startTime != null and startTime !='' and endTime !=null and endTime!=''">
            and (practical_complete_time BETWEEN #{startTime} and #{endTime}
            or d.create_time BETWEEN #{startTime} and #{endTime}),
        </if>


                                        1,
                                        0
                                )
                        ) AS todayMtComplete,
                    sum(
                            IF
                                (
                                        ticket_type = 1
                                        AND (ticket_status = 4 or ticket_status = 20)
                                        AND edit_status = 20
                                        AND alloc_department_num = #{orgId}
        <if test="type!=null and type ==1">
            AND  practical_complete_time  BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR)
            AND DATEDIFF( practical_complete_time, t.create_time ) = 0,
        </if>
        <if test="beforeStartTime != null and beforeStartTime !='' and beforeEndTime !=null and beforeEndTime!=''">
            and (practical_complete_time BETWEEN #{beforeStartTime} and #{beforeEndTime}
            or d.create_time BETWEEN #{beforeStartTime} and #{beforeEndTime}),
        </if>
                                         1,
                                        0
                                )
                        ) AS yesterDayMtComplete
                FROM
                    ticket t
                        LEFT  JOIN
                    (SELECT
                         tol.`ticket_id`,
                         MAX(tol.create_time) AS create_time
                     FROM
                         ticket_op_logs tol
                     WHERE tol.msg='工单#验收'
                     GROUP BY tol.`ticket_id`) d
                    ON t.`id` = d.ticket_id
                where
                    ticket_type = 1
                  and is_merge is null
                  AND (ticket_status=4 or ticket_status=20)
                  AND edit_status=20
            ) t

    </select>
    <select id="getDispatchTotal" resultType="java.lang.Integer">
        SELECT
        IFNULL(count(*),0) as val
        FROM
        ticket t
        INNER  JOIN
        (SELECT
        tol.`ticket_id`,
        MIN(tol.create_time) AS create_time
        FROM
        ticket_op_logs tol
        WHERE op_type =1 AND op_status = 3
        GROUP BY tol.`ticket_id`) d
        ON t.`id` = d.ticket_id
        WHERE
        t.dispatch_status >2
        and t.alloc_department_num ='10001'
        <if test="type!=null and type ==1">
            and  d.create_time  BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR)
        </if>
        <if test="startTime != null and startTime !='' and endTime !=null and endTime!=''">
            and d.create_time  BETWEEN #{startTime} and #{endTime}
        </if>
        UNION ALL
        SELECT
        IFNULL(count(*),0) as val
        FROM
        ticket t
        INNER  JOIN
        (SELECT
        tol.`ticket_id`,
        MIN(tol.create_time) AS create_time
        FROM
        ticket_op_logs tol
        WHERE op_type =1 AND op_status = 3
        GROUP BY tol.`ticket_id`) d
        ON t.`id` = d.ticket_id
        WHERE
        t.dispatch_status >2
        and t.alloc_department_num ='10002'
        <if test="type!=null and type ==1">
            and  d.create_time  BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR)
        </if>
        <if test="startTime != null and startTime !='' and endTime !=null and endTime!=''">
            and d.create_time  BETWEEN #{startTime} and #{endTime}
        </if>
        UNION ALL
        SELECT
        IFNULL(count(*),0) as val
        FROM
        ticket t
        INNER  JOIN
        (SELECT
        tol.`ticket_id`,
        MIN(tol.create_time) AS create_time
        FROM
        ticket_op_logs tol
        WHERE op_type =1 AND op_status = 3
        GROUP BY tol.`ticket_id`) d
        ON t.`id` = d.ticket_id
        WHERE
        t.dispatch_status >2
        and t.alloc_department_num ='10003'
        <if test="type!=null and type ==1">
            and  d.create_time  BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR)
        </if>
        <if test="startTime != null and startTime !='' and endTime !=null and endTime!=''">
            and d.create_time  BETWEEN #{startTime} and #{endTime}
        </if>
    </select>
    <select id="getCompleteDispatchTotal" resultType="java.lang.Integer">
        SELECT
        IFNULL(count(*),0) as val
        FROM
        ticket t
        INNER  JOIN
        (SELECT
        tol.`ticket_id`,
        MIN(tol.create_time) AS create_time
        FROM
        ticket_op_logs tol
        WHERE op_type =1 AND op_status = 20
        GROUP BY tol.`ticket_id`) d
        ON t.`id` = d.ticket_id
        WHERE
        t.dispatch_status = 20
        and t.alloc_department_num ='10001'
        <if test="type!=null and type ==1">
            and  d.create_time  BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR)
        </if>
        <if test="startTime != null and startTime !='' and endTime !=null and endTime!=''">
            and d.create_time  BETWEEN #{startTime} and #{endTime}
        </if>
        UNION ALL
        SELECT
        IFNULL(count(*),0) as val
        FROM
        ticket t
        INNER  JOIN
        (SELECT
        tol.`ticket_id`,
        MIN(tol.create_time) AS create_time
        FROM
        ticket_op_logs tol
        WHERE op_type =1 AND op_status = 20
        GROUP BY tol.`ticket_id`) d
        ON t.`id` = d.ticket_id
        WHERE
        t.dispatch_status = 20
        and t.alloc_department_num ='10002'
        <if test="type!=null and type ==1">
            and  d.create_time  BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR)
        </if>
        <if test="startTime != null and startTime !='' and endTime !=null and endTime!=''">
            and d.create_time  BETWEEN #{startTime} and #{endTime}
        </if>
        UNION ALL
        SELECT
        IFNULL(count(*),0) as val
        FROM
        ticket t
        INNER  JOIN
        (SELECT
        tol.`ticket_id`,
        MIN(tol.create_time) AS create_time
        FROM
        ticket_op_logs tol
        WHERE op_type =1 AND op_status = 20
        GROUP BY tol.`ticket_id`) d
        ON t.`id` = d.ticket_id
        WHERE
        t.dispatch_status = 20
        and t.alloc_department_num ='10003'
        <if test="type!=null and type ==1">
            and  d.create_time BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR)
        </if>
        <if test="startTime != null and startTime !='' and endTime !=null and endTime!=''">
            and d.create_time  BETWEEN #{startTime} and #{endTime}
        </if>
    </select>
    <select id="getMoneyDispatchTotal" resultType="java.lang.Integer">
        SELECT
        IFNULL(count(*),0) as val
        FROM
        ticket t
        INNER  JOIN
        (SELECT
        tol.`ticket_id`,
        MIN(tol.create_time) AS create_time
        FROM
        ticket_op_logs tol
        WHERE op_type =1 AND op_status = 3
        GROUP BY tol.`ticket_id`) d
        ON t.`id` = d.ticket_id
        WHERE
        t.dispatch_status >2
        and t.predict_cost > 3000
        and t.alloc_department_num ='10001'
        <if test="type!=null and type ==1">
            and  d.create_time  BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR)
        </if>
        <if test="startTime != null and startTime !='' and endTime !=null and endTime!=''">
            and d.create_time  BETWEEN #{startTime} and #{endTime}
        </if>
        UNION ALL
        SELECT
        IFNULL(count(*),0) as val
        FROM
        ticket t
        INNER  JOIN
        (SELECT
        tol.`ticket_id`,
        MIN(tol.create_time) AS create_time
        FROM
        ticket_op_logs tol
        WHERE op_type =1 AND op_status = 3
        GROUP BY tol.`ticket_id`) d
        ON t.`id` = d.ticket_id
        WHERE
        t.dispatch_status >2
        and t.predict_cost > 3000
        and t.alloc_department_num ='10002'
        <if test="type!=null and type ==1">
            and  d.create_time BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR)
        </if>
        <if test="startTime != null and startTime !='' and endTime !=null and endTime!=''">
            and d.create_time  BETWEEN #{startTime} and #{endTime}
        </if>
        UNION ALL
        SELECT
        IFNULL(count(*),0) as val
        FROM
        ticket t
        INNER  JOIN
        (SELECT
        tol.`ticket_id`,
        MIN(tol.create_time) AS create_time
        FROM
        ticket_op_logs tol
        WHERE op_type =1 AND op_status = 3
        GROUP BY tol.`ticket_id`) d
        ON t.`id` = d.ticket_id
        WHERE
        t.dispatch_status >2
          and t.predict_cost > 3000
        and t.alloc_department_num ='10003'
        <if test="type!=null and type ==1">
            and  d.create_time  BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR)
        </if>
        <if test="startTime != null and startTime !='' and endTime !=null and endTime!=''">
            and d.create_time  BETWEEN #{startTime} and #{endTime}
        </if>
    </select>
    <select id="getMaxMoneyDispatchTotal" resultType="java.lang.Integer">
        SELECT
        IFNULL(count(*),0) as val
        FROM
        ticket t
        INNER  JOIN
        (SELECT
        tol.`ticket_id`,
        MIN(tol.create_time) AS create_time
        FROM
        ticket_op_logs tol
        WHERE op_type =1 AND op_status = 3
        GROUP BY tol.`ticket_id`) d
        ON t.`id` = d.ticket_id
        WHERE
        t.dispatch_status >2
        and t.predict_cost > 10000
        and t.alloc_department_num ='10001'
        <if test="type!=null and type ==1">
            and  d.create_time  BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR)
        </if>
        <if test="startTime != null and startTime !='' and endTime !=null and endTime!=''">
            and d.create_time  BETWEEN #{startTime} and #{endTime}
        </if>
        UNION ALL
        SELECT
        IFNULL(count(*),0) as val
        FROM
        ticket t
        INNER  JOIN
        (SELECT
        tol.`ticket_id`,
        MIN(tol.create_time) AS create_time
        FROM
        ticket_op_logs tol
        WHERE op_type =1 AND op_status = 3
        GROUP BY tol.`ticket_id`) d
        ON t.`id` = d.ticket_id
        WHERE
        t.dispatch_status >2
        and t.predict_cost > 10000
        and t.alloc_department_num ='10002'
        <if test="type!=null and type ==1">
            and  d.create_time  BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR)
        </if>
        <if test="startTime != null and startTime !='' and endTime !=null and endTime!=''">
            and d.create_time  BETWEEN #{startTime} and #{endTime}
        </if>
        UNION ALL
        SELECT
        IFNULL(count(*),0) as val
        FROM
        ticket t
        INNER  JOIN
        (SELECT
        tol.`ticket_id`,
        MIN(tol.create_time) AS create_time
        FROM
        ticket_op_logs tol
        WHERE op_type =1 AND op_status = 3
        GROUP BY tol.`ticket_id`) d
        ON t.`id` = d.ticket_id
        WHERE
        t.dispatch_status >2
        and t.predict_cost > 10000
        and t.alloc_department_num ='10003'
        <if test="type!=null and type ==1">
            and  d.create_time  BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR)
        </if>
        <if test="startTime != null and startTime !='' and endTime !=null and endTime!=''">
            and d.create_time  BETWEEN #{startTime} and #{endTime}
        </if>
    </select>
    <select id="getAcceptanceTotal" resultType="java.lang.Integer">
        SELECT
        IFNULL(count(*),0) as val
        FROM
        ticket t
        LEFT  JOIN
        (SELECT
        tol.`ticket_id`,
        MIN(tol.create_time) AS create_time
        FROM
        ticket_op_logs tol
        WHERE op_type =2 AND op_status = 3
        GROUP BY tol.`ticket_id`) d
        ON t.`id` = d.ticket_id
        WHERE
        t.accept_status >2
        and t.alloc_department_num ='10001'
        <if test="type!=null and type ==1">
            and  d.create_time  BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR)
        </if>
        <if test="startTime != null and startTime !='' and endTime !=null and endTime!=''">
            and d.create_time  BETWEEN #{startTime} and #{endTime}
        </if>
        UNION ALL
        SELECT
        IFNULL(count(*),0) as val
        FROM
        ticket  t
        LEFT  JOIN
        (SELECT
        tol.`ticket_id`,
        MIN(tol.create_time) AS create_time
        FROM
        ticket_op_logs tol
        WHERE op_type =2 AND op_status = 3
        GROUP BY tol.`ticket_id`) d
        ON t.`id` = d.ticket_id
        WHERE
        t.accept_status >2
        and t.alloc_department_num ='10002'
        <if test="type!=null and type ==1">
            and  d.create_time  BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR)
        </if>
        <if test="startTime != null and startTime !='' and endTime !=null and endTime!=''">
            and d.create_time  BETWEEN #{startTime} and #{endTime}
        </if>
        UNION ALL
        SELECT
        IFNULL(count(*),0) as val
        FROM
        ticket  t
        LEFT  JOIN
        (SELECT
        tol.`ticket_id`,
        MIN(tol.create_time) AS create_time
        FROM
        ticket_op_logs tol
        WHERE op_type =2 AND op_status = 3
        GROUP BY tol.`ticket_id`) d
        ON t.`id` = d.ticket_id
        WHERE
        t.accept_status >2
        and t.alloc_department_num ='10003'
        <if test="type!=null and type ==1">
            and  d.create_time  BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR)
        </if>
        <if test="startTime != null and startTime !='' and endTime !=null and endTime!=''">
            and d.create_time  BETWEEN #{startTime} and #{endTime}
        </if>
    </select>
    <select id="getCompleteAcceptanceTotal" resultType="java.lang.Integer">
        SELECT
        IFNULL(count(*),0) as val
        FROM
        ticket  t
        INNER  JOIN
        (SELECT
        tol.`ticket_id`,
        MIN(tol.create_time) AS create_time
        FROM
        ticket_op_logs tol
        WHERE op_type =2 AND op_status = 20
        GROUP BY tol.`ticket_id`) d
        ON t.`id` = d.ticket_id
        WHERE
        t.accept_status = 20
        and t.alloc_department_num ='10001'
        <if test="type!=null and type ==1">
            and  d.create_time  BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR)
        </if>
        <if test="startTime != null and startTime !='' and endTime !=null and endTime!=''">
            and d.create_time  BETWEEN #{startTime} and #{endTime}
        </if>
        UNION ALL
        SELECT
        IFNULL(count(*),0) as val
        FROM
        ticket  t
        INNER  JOIN
        (SELECT
        tol.`ticket_id`,
        MIN(tol.create_time) AS create_time
        FROM
        ticket_op_logs tol
        WHERE op_type =2 AND op_status = 20
        GROUP BY tol.`ticket_id`) d
        ON t.`id` = d.ticket_id
        WHERE
        t.accept_status = 20
        and t.alloc_department_num ='10002'
        <if test="type!=null and type ==1">
            and  d.create_time  BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR)
        </if>
        <if test="startTime != null and startTime !='' and endTime !=null and endTime!=''">
            and d.create_time  BETWEEN #{startTime} and #{endTime}
        </if>
        UNION ALL
        SELECT
        IFNULL(count(*),0) as val
        FROM
        ticket  t
        INNER  JOIN
        (SELECT
        tol.`ticket_id`,
        MIN(tol.create_time) AS create_time
        FROM
        ticket_op_logs tol
        WHERE op_type =2 AND op_status = 20
        GROUP BY tol.`ticket_id`) d
        ON t.`id` = d.ticket_id
        WHERE
        t.accept_status =20
        and t.alloc_department_num ='10003'
        <if test="type!=null and type ==1">
            and  d.create_time  BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR)
        </if>
        <if test="startTime != null and startTime !='' and endTime !=null and endTime!=''">
            and d.create_time  BETWEEN #{startTime} and #{endTime}
        </if>
    </select>
    <select id="getMoneyAcceptanceTotal" resultType="java.lang.Integer">
        SELECT
        IFNULL(count(*),0) as val
        FROM
        ticket t
        INNER  JOIN
        (SELECT
        tol.`ticket_id`,
        MIN(tol.create_time) AS create_time
        FROM
        ticket_op_logs tol
        WHERE op_type =2 AND op_status = 3
        GROUP BY tol.`ticket_id`) d
        ON t.`id` = d.ticket_id
        WHERE
        t.accept_status >2
        and t.accept_predict_cost > 3000
        and t.alloc_department_num ='10001'
        <if test="type!=null and type ==1">
            and  d.create_time  BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR)
        </if>
        <if test="startTime != null and startTime !='' and endTime !=null and endTime!=''">
            and d.create_time  BETWEEN #{startTime} and #{endTime}
        </if>
        UNION ALL
        SELECT
        IFNULL(count(*),0) as val
        FROM
        ticket t
        INNER  JOIN
        (SELECT
        tol.`ticket_id`,
        MIN(tol.create_time) AS create_time
        FROM
        ticket_op_logs tol
        WHERE op_type =2 AND op_status = 3
        GROUP BY tol.`ticket_id`) d
        ON t.`id` = d.ticket_id
        WHERE
        t.accept_status >2
        and t.accept_predict_cost > 3000
        and t.alloc_department_num ='10002'
        <if test="type!=null and type ==1">
            and  d.create_time  BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR)
        </if>
        <if test="startTime != null and startTime !='' and endTime !=null and endTime!=''">
            and d.create_time  BETWEEN #{startTime} and #{endTime}
        </if>
        UNION ALL
        SELECT
        IFNULL(count(*),0) as val
        FROM
        ticket t
        INNER  JOIN
        (SELECT
        tol.`ticket_id`,
        MIN(tol.create_time) AS create_time
        FROM
        ticket_op_logs tol
        WHERE op_type =2 AND op_status = 3
        GROUP BY tol.`ticket_id`) d
        ON t.`id` = d.ticket_id
        WHERE
        t.accept_status >2
        and t.accept_predict_cost > 3000
        and t.alloc_department_num ='10003'
        <if test="type!=null and type ==1">
            and  d.create_time  BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR)
        </if>
        <if test="startTime != null and startTime !='' and endTime !=null and endTime!=''">
            and d.create_time  BETWEEN #{startTime} and #{endTime}
        </if>
    </select>
    <select id="getMaxMoneyAcceptanceTotal" resultType="java.lang.Integer">
        SELECT
        IFNULL(count(*),0) as val
        FROM
        ticket t
        INNER  JOIN
        (SELECT
        tol.`ticket_id`,
        MIN(tol.create_time) AS create_time
        FROM
        ticket_op_logs tol
        WHERE op_type =2 AND op_status = 3
        GROUP BY tol.`ticket_id`) d
        ON t.`id` = d.ticket_id
        WHERE
        t.accept_status >2
        and t.accept_predict_cost > 10000
        and t.alloc_department_num ='10001'
        <if test="type!=null and type ==1">
            and  d.create_time  BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR)
        </if>
        <if test="startTime != null and startTime !='' and endTime !=null and endTime!=''">
            and d.create_time  BETWEEN #{startTime} and #{endTime}
        </if>
        UNION ALL
        SELECT
        IFNULL(count(*),0) as val
        FROM
        ticket t
        INNER  JOIN
        (SELECT
        tol.`ticket_id`,
        MIN(tol.create_time) AS create_time
        FROM
        ticket_op_logs tol
        WHERE op_type =2 AND op_status = 3
        GROUP BY tol.`ticket_id`) d
        ON t.`id` = d.ticket_id
        WHERE
        t.accept_status >2
        and t.accept_predict_cost > 10000
        and t.alloc_department_num ='10002'
        <if test="type!=null and type ==1">
            and  d.create_time BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR)
        </if>
        <if test="startTime != null and startTime !='' and endTime !=null and endTime!=''">
            and d.create_time  BETWEEN #{startTime} and #{endTime}
        </if>
        UNION ALL
        SELECT
        IFNULL(count(*),0) as val
        FROM
        ticket t
        INNER  JOIN
        (SELECT
        tol.`ticket_id`,
        MIN(tol.create_time) AS create_time
        FROM
        ticket_op_logs tol
        WHERE op_type =2 AND op_status = 3
        GROUP BY tol.`ticket_id`) d
        ON t.`id` = d.ticket_id
        WHERE
        t.accept_status >2
        and t.accept_predict_cost > 10000
        and t.alloc_department_num ='10003'
        <if test="type!=null and type ==1">
            and  d.create_time  BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR)
        </if>
        <if test="startTime != null and startTime !='' and endTime !=null and endTime!=''">
            and d.create_time  BETWEEN #{startTime} and #{endTime}
        </if>
    </select>
    <select id="getAppFaultType" resultType="java.util.Map">
        SELECT
        IFNULL(bft.fault_name,'未知')     AS name,
            COUNT(1)  AS data
        FROM  ticket t
                  LEFT JOIN base_fault_type bft ON t.issue_type = bft.fault_id
        WHERE t.edit_status = 20 and  t.ticket_status >0  and t.is_merge is null
        <if test="type!=null and type ==1">
            and  t.create_time  BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR)
        </if>
        <if test="startTime != null and startTime !='' and endTime !=null and endTime!=''">
            and t.create_time  BETWEEN #{startTime} and #{endTime}
        </if>
        GROUP BY bft.fault_id
        ORDER BY data desc,fault_id desc
    </select>
    <select id="getAppTicketSource" resultType="java.util.Map">
        SELECT
            (SELECT  sci.item_value  FROM sys_constant_item sci WHERE  sci.dict_key='issue_source' AND sci.`item_key` = t.issue_source)   AS name,
            COUNT(1)  AS data
        FROM ticket t
        WHERE t.edit_status = 20 AND t.ticket_status >0
          and t.is_merge is null
        <if test="type!=null and type ==1">
            and  t.create_time BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR)
        </if>
        <if test="startTime != null and startTime !='' and endTime !=null and endTime!=''">
            and t.create_time  BETWEEN #{startTime} and #{endTime}
        </if>
        GROUP BY t.issue_source
        order by data desc
    </select>
    <select id="getDeviceType" resultType="java.util.Map">
        SELECT
            bdt.type_name     AS name,
            COUNT(1)  AS data
        FROM  ticket t
                  LEFT JOIN base_device_type bdt ON t.device_type = bdt.type_id
        WHERE t.edit_status = 20 and  t.ticket_status >0  and t.is_merge is null
        <if test="type!=null and type ==1">
            and  t.create_time  BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR)
        </if>
        <if test="startTime != null and startTime !='' and endTime !=null and endTime!=''">
            and t.create_time  BETWEEN #{startTime} and #{endTime}
        </if>
        GROUP BY bdt.type_name
        ORDER BY data desc,bdt.type_name desc
    </select>

    <select id="getDealWay" resultType="java.util.Map">
        SELECT
        (SELECT  sci.item_value  FROM sys_constant_item sci WHERE  sci.dict_key='deal_way' AND sci.`item_key` = t.deal_way)   AS name,
        COUNT(1)  AS data
        FROM ticket t
        WHERE t.edit_status = 20 AND t.ticket_status >0
        and t.is_merge is null
        <if test="type!=null and type ==1">
            and  t.create_time BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR)
        </if>
        <if test="startTime != null and startTime !='' and endTime !=null and endTime!=''">
            and t.create_time  BETWEEN #{startTime} and #{endTime}
        </if>
        GROUP BY t.deal_way
        order by data desc
    </select>

    <select id="getdispatchPredictCost" resultType="java.lang.String">


        SELECT
            IFNULL(sum( IFNULL( predict_cost, 0 ) ),0) AS 	 predictCost
        FROM
            ticket   t
        INNER  JOIN
        (SELECT
        tol.`ticket_id`,
        MIN(tol.create_time) AS create_time
        FROM
        ticket_op_logs tol
        WHERE op_type =1 AND op_status = 3
        GROUP BY tol.`ticket_id`) d
        ON t.`id` = d.ticket_id
        WHERE
            t.dispatch_status >2
          <if test="orgId !=null and orgId !=''">
              and t.alloc_department_num =#{orgId}
          </if>

        <if test="type!=null and type ==1">
            and  d.create_time  BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR)
        </if>
        <if test="startTime != null and startTime !='' and endTime !=null and endTime!=''">
            and d.create_time  BETWEEN #{startTime} and #{endTime}
        </if>
        UNION all
        SELECT
            IFNULL( sum( IFNULL( predict_cost, 0 ) ),0) AS 	 predictCost
        FROM
            ticket  t
        INNER  JOIN
        (SELECT
        tol.`ticket_id`,
        MIN(tol.create_time) AS create_time
        FROM
        ticket_op_logs tol
        WHERE op_type =1 AND op_status = 3
        GROUP BY tol.`ticket_id`) d
        ON t.`id` = d.ticket_id
        WHERE
            t.dispatch_status >2
        <if test="orgId !=null and orgId !=''">
            and t.alloc_department_num =#{orgId}
        </if>
          and t.predict_cost >3000
        <if test="type!=null and type ==1">
            and  d.create_time  BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR)
        </if>
        <if test="startTime != null and startTime !='' and endTime !=null and endTime!=''">
            and d.create_time  BETWEEN #{startTime} and #{endTime}
        </if>
        UNION all
        SELECT
            IFNULL(sum( IFNULL( predict_cost, 0 ) ),0) AS 	 predictCost
        FROM
            ticket  t
        INNER  JOIN
        (SELECT
        tol.`ticket_id`,
        MIN(tol.create_time) AS create_time
        FROM
        ticket_op_logs tol
        WHERE op_type =1 AND op_status = 3
        GROUP BY tol.`ticket_id`) d
        ON t.`id` = d.ticket_id
        WHERE
            t.dispatch_status >2
        <if test="orgId !=null and orgId !=''">
            and t.alloc_department_num =#{orgId}
        </if>
          and t.predict_cost >10000
        <if test="type!=null and type ==1">
            and  d.create_time  BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR)
        </if>
        <if test="startTime != null and startTime !='' and endTime !=null and endTime!=''">
            and d.create_time  BETWEEN #{startTime} and #{endTime}
        </if>
        UNION all
        SELECT
            IFNULL(sum( IFNULL( predict_cost, 0 ) ),0) AS 	 predictCost
        FROM
            ticket  t
        INNER  JOIN
        (SELECT
        tol.`ticket_id`,
        MIN(tol.create_time) AS create_time
        FROM
        ticket_op_logs tol
        WHERE op_type =1 AND op_status = 20
        GROUP BY tol.`ticket_id`) d
        ON t.`id` = d.ticket_id
        WHERE
            t.dispatch_status =20
        <if test="orgId !=null and orgId !=''">
            and t.alloc_department_num =#{orgId}
        </if>
        <if test="type!=null and type ==1">
            and  d.create_time  BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR)
        </if>
        <if test="startTime != null and startTime !='' and endTime !=null and endTime!=''">
            and d.create_time  BETWEEN #{startTime} and #{endTime}
        </if>


    </select>
    <select id="getAcceptancePredictCost" resultType="java.lang.String">

        SELECT
        IFNULL(sum( IFNULL( accept_predict_cost, 0 ) ),0) AS 	 predictCost
        FROM
        ticket t
        INNER JOIN
        (SELECT
        tol.`ticket_id`,
        MIN(tol.create_time) AS create_time
        FROM
        ticket_op_logs tol
        WHERE op_type =2 AND op_status = 3
        GROUP BY tol.`ticket_id`) d
        ON t.`id` = d.ticket_id
        WHERE
        t.accept_status >2
        <if test="orgId !=null and orgId !=''">
            and t.alloc_department_num =#{orgId}
        </if>

        <if test="type!=null and type ==1">
            and  d.create_time  BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR)
        </if>
        <if test="startTime != null and startTime !='' and endTime !=null and endTime!=''">
            and d.create_time  BETWEEN #{startTime} and #{endTime}
        </if>
        UNION all
        SELECT
        IFNULL( sum( IFNULL( accept_predict_cost, 0 ) ),0) AS 	 predictCost
        FROM
        ticket t
        INNER JOIN
        (SELECT
        tol.`ticket_id`,
        MIN(tol.create_time) AS create_time
        FROM
        ticket_op_logs tol
        WHERE op_type =2 AND op_status = 3
        GROUP BY tol.`ticket_id`) d
        ON t.`id` = d.ticket_id
        WHERE
        t.accept_status >2
        <if test="orgId !=null and orgId !=''">
            and t.alloc_department_num =#{orgId}
        </if>
        and t.accept_predict_cost >3000
        <if test="type!=null and type ==1">
            and  d.create_time  BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR)
        </if>
        <if test="startTime != null and startTime !='' and endTime !=null and endTime!=''">
            and d.create_time  BETWEEN #{startTime} and #{endTime}
        </if>
        UNION all
        SELECT
        IFNULL(sum( IFNULL( accept_predict_cost, 0 ) ),0) AS 	 predictCost
        FROM
        ticket t  INNER JOIN
        (SELECT
        tol.`ticket_id`,
        MIN(tol.create_time) AS create_time
        FROM
        ticket_op_logs tol
        WHERE op_type =2 AND op_status = 3
        GROUP BY tol.`ticket_id`) d
        ON t.`id` = d.ticket_id
        WHERE
        t.accept_status >2
        <if test="orgId !=null and orgId !=''">
            and t.alloc_department_num =#{orgId}
        </if>
        and t.accept_predict_cost >10000
        <if test="type!=null and type ==1">
            and  d.create_time  BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR)
        </if>
        <if test="startTime != null and startTime !='' and endTime !=null and endTime!=''">
            and d.create_time  BETWEEN #{startTime} and #{endTime}
        </if>
        UNION all
        SELECT
        IFNULL(sum( IFNULL( accept_predict_cost, 0 ) ),0) AS 	 predictCost
        FROM
        ticket t  INNER JOIN
        (SELECT
        tol.`ticket_id`,
        MIN(tol.create_time) AS create_time
        FROM
        ticket_op_logs tol
        WHERE op_type =2 AND op_status = 20
        GROUP BY tol.`ticket_id`) d
        ON t.`id` = d.ticket_id
        WHERE
        t.accept_status =20
        <if test="orgId !=null and orgId !=''">
            and t.alloc_department_num =#{orgId}
        </if>
        <if test="type!=null and type ==1">
            and  d.create_time  BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR)
        </if>
        <if test="startTime != null and startTime !='' and endTime !=null and endTime!=''">
            and d.create_time  BETWEEN #{startTime} and #{endTime}
        </if>
    </select>
    <select id="dispatchTicketCompare" resultType="java.util.Map">
        SELECT
            IFNULL(( todayTotal - yesterDayTotal ),0) AS num,
        IFNULL(( todayMoney - yesterdayMoney ),0) AS money,
        IFNULL(( todayMinMoney - yesterdayMinMoney ),0) AS `min`,
            IFNULL(( todayMaxMoney - yesterdayMaxMoney ),0) AS `max`,
        IFNULL(( todayApprovedNum - yesterDayApprovedNum ),0) AS `approved`
        FROM
            (
                SELECT
                    sum(
                            IF
                                (
                                        dispatch_status > 2
        <if test="orgId !=null and orgId !=''">
            and alloc_department_num =#{orgId}
        </if>
        <if test="type!=null and type ==1">
            AND d.create_time  BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR),
        </if>
        <if test="startTime != null and startTime !='' and endTime !=null and endTime!=''">
            and d.create_time  BETWEEN #{startTime} and #{endTime},
        </if>
                                        1,
                                        0
                                )
                        ) AS todayTotal,
                    sum(
                            IF
                                (
                                        dispatch_status > 2
        <if test="orgId !=null and orgId !=''">
            and alloc_department_num =#{orgId}
        </if>
        <if test="type!=null and type ==1">
            AND d.create_time   BETWEEN DATE_ADD(DATE_SUB(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR) and  DATE_ADD(CURDATE(), INTERVAL 0 HOUR),
        </if>
        <if test="beforeStartTime != null and beforeStartTime !='' and beforeEndTime !=null and beforeEndTime!=''">
            and d.create_time  BETWEEN #{beforeStartTime} and #{beforeEndTime},
        </if>
                                        1,
                                        0
                                )
                        ) AS yesterDayTotal,
                    sum(
                            IF
                                (
                                        dispatch_status > 2
                                            <if test="orgId !=null and orgId !=''">
                                                 and alloc_department_num =#{orgId}
                                            </if>
        <if test="type!=null and type ==1">
            AND d.create_time  BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR),
        </if>
        <if test="startTime != null and startTime !='' and endTime !=null and endTime!=''">
            and d.create_time  BETWEEN #{startTime} and #{endTime},
        </if>
                                          predict_cost,
                                        0
                                )
                        ) AS todayMoney,
                    sum(
                            IF
                                (
                                        dispatch_status > 2
                                        <if test="orgId !=null and orgId !=''">
                                            and alloc_department_num =#{orgId}
                                        </if>
        <if test="type!=null and type ==1">
            AND d.create_time   BETWEEN DATE_ADD(DATE_SUB(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR) and  DATE_ADD(CURDATE(), INTERVAL 0 HOUR),
        </if>
        <if test="beforeStartTime != null and beforeStartTime !='' and beforeEndTime !=null and beforeEndTime!=''">
            and d.create_time  BETWEEN #{beforeStartTime} and #{beforeEndTime},
        </if>
              predict_cost,
                                        0
                                )
                        ) AS yesterdayMoney,
                    sum(
                            IF
                                (
                                        dispatch_status > 2
        <if test="orgId !=null and orgId !=''">
            and alloc_department_num =#{orgId}
        </if>
                                        AND predict_cost > 3000
        <if test="type!=null and type ==1">
            AND d.create_time  BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR),
        </if>
        <if test="startTime != null and startTime !='' and endTime !=null and endTime!=''">
            and d.create_time  BETWEEN #{startTime} and #{endTime},
        </if>
                                        1,
                                        0
                                )
                        ) AS todayMinMoney,
                    sum(
                            IF
                                (
                                        dispatch_status > 2
        <if test="orgId !=null and orgId !=''">
            and alloc_department_num =#{orgId}
        </if>
                                        AND predict_cost > 3000
        <if test="type!=null and type ==1">
            AND d.create_time   BETWEEN DATE_ADD(DATE_SUB(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR) and  DATE_ADD(CURDATE(), INTERVAL 0 HOUR),
        </if>
        <if test="beforeStartTime != null and beforeStartTime !='' and beforeEndTime !=null and beforeEndTime!=''">
            and d.create_time  BETWEEN #{beforeStartTime} and #{beforeEndTime},
        </if>
            1,
                                        0
                                )
                        ) AS yesterdayMinMoney,
                    sum(
                            IF
                                (
                                        dispatch_status > 2
        <if test="orgId !=null and orgId !=''">
            and alloc_department_num =#{orgId}
        </if>
                                        AND predict_cost > 10000
        <if test="type!=null and type ==1">
            AND d.create_time  BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR),
        </if>
        <if test="startTime != null and startTime !='' and endTime !=null and endTime!=''">
            and d.create_time  BETWEEN #{startTime} and #{endTime},
        </if>
                                        1,
                                        0
                                )
                        ) AS todayMaxMoney,
                    sum(
                            IF
                                (
                                        dispatch_status > 2
        <if test="orgId !=null and orgId !=''">
            and alloc_department_num =#{orgId}
        </if>
                                        AND predict_cost > 10000
        <if test="type!=null and type ==1">
            AND d.create_time   BETWEEN DATE_ADD(DATE_SUB(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR) and  DATE_ADD(CURDATE(), INTERVAL 0 HOUR),
        </if>
        <if test="beforeStartTime != null and beforeStartTime !='' and beforeEndTime !=null and beforeEndTime!=''">
            and d.create_time  BETWEEN #{beforeStartTime} and #{beforeEndTime},
        </if>    1,
                                        0
                                )
                        ) AS yesterdayMaxMoney,
                    sum(
                            IF
                                (
                                        dispatch_status = 20
        <if test="orgId !=null and orgId !=''">
            and alloc_department_num =#{orgId}
        </if>
        <if test="type!=null and type ==1">
            AND d.create_time  BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR),
        </if>
        <if test="startTime != null and startTime !='' and endTime !=null and endTime!=''">
            and d.create_time  BETWEEN #{startTime} and #{endTime},
        </if>
                                        1,
                                        0
                                )
                        ) AS todayApprovedNum,
                    sum(
                            IF
                                (
                                        dispatch_status = 20
        <if test="orgId !=null and orgId !=''">
            and alloc_department_num =#{orgId}
        </if>
        <if test="type!=null and type ==1">
            AND d.create_time   BETWEEN DATE_ADD(DATE_SUB(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR) and  DATE_ADD(CURDATE(), INTERVAL 0 HOUR),
        </if>
        <if test="beforeStartTime != null and beforeStartTime !='' and beforeEndTime !=null and beforeEndTime!=''">
            and d.create_time  BETWEEN #{beforeStartTime} and #{beforeEndTime},
        </if>   1,
                                        0
                                )
                        ) AS yesterDayApprovedNum
                FROM
                    ticket t INNER JOIN
        (SELECT
        tol.`ticket_id`,
        MIN(tol.create_time) AS create_time
        FROM
        ticket_op_logs tol
        WHERE op_type =1 AND op_status = 3
        GROUP BY tol.`ticket_id`) d
        ON t.`id` = d.ticket_id
            ) t
    </select>
    <select id="acceptanceTicketCompare" resultType="java.util.Map">
        SELECT
        IFNULL(( todayTotal - yesterDayTotal ),0) AS num,
        IFNULL(( todayMoney - yesterdayMoney ),0) AS money,
        IFNULL(( todayMinMoney - yesterdayMinMoney ),0) AS `min`,
        IFNULL(( todayMaxMoney - yesterdayMaxMoney ),0) AS `max`,
        IFNULL(( todayApprovedNum - yesterDayApprovedNum ),0) AS approved
        FROM
        (
        SELECT
        sum(
        IF
        (
        accept_status > 2
        <if test="orgId !=null and orgId !=''">
            and alloc_department_num =#{orgId}
        </if>

        <if test="type!=null and type ==1">
            AND d.create_time BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR),
        </if>
        <if test="startTime!=null and startTime !='' and endTime !=null and endTime !=''">
            AND d.create_time BETWEEN #{startTime} and #{endTime},
        </if>  1,
        0
        )
        ) AS todayTotal,
        sum(
        IF
        (
        accept_status > 2
        <if test="orgId !=null and orgId !=''">
            and alloc_department_num =#{orgId}
        </if>
        <if test="type!=null and type ==1">
            AND d.create_time BETWEEN DATE_ADD(DATE_SUB(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR) and  DATE_ADD(CURDATE(), INTERVAL 0 HOUR),
        </if>
        <if test="beforeStartTime!=null and beforeStartTime !='' and beforeEndTime !=null and beforeEndTime !=''">
            AND d.create_time BETWEEN #{beforeStartTime} and #{beforeEndTime},
        </if>  1,
        0
        )
        ) AS yesterDayTotal,
        sum(
        IF
        (
        accept_status > 2
        <if test="orgId !=null and orgId !=''">
            and alloc_department_num =#{orgId}
        </if>
        <if test="type!=null and type ==1">
            AND d.create_time BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR),
        </if>
        <if test="startTime!=null and startTime !='' and endTime !=null and endTime !=''">
            AND d.create_time BETWEEN #{startTime} and #{endTime},
        </if> accept_predict_cost,
        0
        )
        ) AS todayMoney,
        sum(
        IF
        (
        accept_status > 2
        <if test="orgId !=null and orgId !=''">
            and alloc_department_num =#{orgId}
        </if>
        <if test="type!=null and type ==1">
            AND d.create_time BETWEEN DATE_ADD(DATE_SUB(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR) and  DATE_ADD(CURDATE(), INTERVAL 0 HOUR),
        </if>
        <if test="beforeStartTime!=null and beforeStartTime !='' and beforeEndTime !=null and beforeEndTime !=''">
            AND d.create_time BETWEEN #{beforeStartTime} and #{beforeEndTime},
        </if>    accept_predict_cost,
        0
        )
        ) AS yesterdayMoney,
        sum(
        IF
        (
        accept_status > 2
        <if test="orgId !=null and orgId !=''">
            and alloc_department_num =#{orgId}
        </if>
        AND accept_predict_cost > 3000
        <if test="type!=null and type ==1">
            AND d.create_time BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR),
        </if>
        <if test="startTime!=null and startTime !='' and endTime !=null and endTime !=''">
            AND d.create_time BETWEEN #{startTime} and #{endTime},
        </if>  1,
        0
        )
        ) AS todayMinMoney,
        sum(
        IF
        (
        accept_status > 2
        <if test="orgId !=null and orgId !=''">
            and alloc_department_num =#{orgId}
        </if>
        AND accept_predict_cost > 3000
        <if test="type!=null and type ==1">
            AND d.create_time BETWEEN DATE_ADD(DATE_SUB(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR) and  DATE_ADD(CURDATE(), INTERVAL 0 HOUR),
        </if>
        <if test="beforeStartTime!=null and beforeStartTime !='' and beforeEndTime !=null and beforeEndTime !=''">
            AND d.create_time BETWEEN #{beforeStartTime} and #{beforeEndTime},
        </if>  1,
        0
        )
        ) AS yesterdayMinMoney,
        sum(
        IF
        (
        accept_status > 2
        <if test="orgId !=null and orgId !=''">
            and alloc_department_num =#{orgId}
        </if>
        AND accept_predict_cost > 10000
        <if test="type!=null and type ==1">
            AND d.create_time BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR),
        </if>
        <if test="startTime!=null and startTime !='' and endTime !=null and endTime !=''">
            AND d.create_time BETWEEN #{startTime} and #{endTime},
        </if> 1,
        0
        )
        ) AS todayMaxMoney,
        sum(
        IF
        (
        accept_status > 2
        <if test="orgId !=null and orgId !=''">
            and alloc_department_num =#{orgId}
        </if>
        AND accept_predict_cost > 10000
        <if test="type!=null and type ==1">
            AND d.create_time BETWEEN DATE_ADD(DATE_SUB(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR) and  DATE_ADD(CURDATE(), INTERVAL 0 HOUR),
        </if>
        <if test="beforeStartTime!=null and beforeStartTime !='' and beforeEndTime !=null and beforeEndTime !=''">
            AND d.create_time BETWEEN #{beforeStartTime} and #{beforeEndTime},
        </if>  1,
        0
        )
        ) AS yesterdayMaxMoney,
        sum(
        IF
        (
        accept_status = 20
        <if test="orgId !=null and orgId !=''">
            and alloc_department_num =#{orgId}
        </if>
        <if test="type!=null and type ==1">
            AND d.create_time BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR),
        </if>
        <if test="startTime!=null and startTime !='' and endTime !=null and endTime !=''">
            AND d.create_time BETWEEN #{startTime} and #{endTime},
        </if> 1,
        0
        )
        ) AS todayApprovedNum,
        sum(
        IF
        (
        accept_status = 20
        <if test="orgId !=null and orgId !=''">
            and alloc_department_num =#{orgId}
        </if>
        <if test="type!=null and type ==1">
            AND d.create_time BETWEEN DATE_ADD(DATE_SUB(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR) and  DATE_ADD(CURDATE(), INTERVAL 0 HOUR),
        </if>
        <if test="beforeStartTime!=null and beforeStartTime !='' and beforeEndTime !=null and beforeEndTime !=''">
            AND d.create_time BETWEEN #{beforeStartTime} and #{beforeEndTime},
        </if> 1,
        0
        )
        ) AS yesterDayApprovedNum
        FROM
        ticket t INNER JOIN
        (SELECT
        tol.`ticket_id`,
        MIN(tol.create_time) AS create_time
        FROM
        ticket_op_logs tol
        WHERE op_type =2 AND op_status = 3
        GROUP BY tol.`ticket_id`) d
        ON t.`id` = d.ticket_id
        ) t
    </select>
    <select id="getDispatchApprovedList" resultType="java.lang.Integer">





        select IFNULL((todayApprovedNum-yesterDayApprovedNum),0) as approved from 	(select sum(
                                         IF
                                             (
                                                     dispatch_status = 20
                                                 <if test="type!=null and type ==1">
                                                     AND d.create_time BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR),
                                                 </if>
                                                <if test="startTime!=null and startTime !='' and endTime !=null and endTime !=''">
                                                    AND d.create_time BETWEEN #{startTime} and #{endTime},
                                                </if>
                                                     1,
                                                     0
                                             )
                                     ) AS todayApprovedNum,
                                 sum(
                                         IF
                                             (
                                                     dispatch_status = 20
        <if test="type!=null and type ==1">
            AND d.create_time BETWEEN DATE_ADD(DATE_SUB(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR) and  DATE_ADD(CURDATE(), INTERVAL 0 HOUR),
        </if>
        <if test="beforeStartTime!=null and beforeStartTime !='' and beforeEndTime !=null and beforeEndTime !=''">
            AND d.create_time BETWEEN #{beforeStartTime} and #{beforeEndTime},
        </if>

                                                     1,
                                                     0
                                             )
                                     ) AS yesterDayApprovedNum
                          from ticket t
                                   INNER JOIN (
                              SELECT
                                  tol.`ticket_id`,
                                  MIN( tol.create_time ) AS create_time
                              FROM
                                  ticket_op_logs tol
                              WHERE
                                  op_type = 1
                                AND op_status = 20

                              GROUP BY
                                  tol.`ticket_id`
                          ) d ON t.`id` = d.ticket_id
                          where  t.alloc_department_num= #{orgId}
                         ) t
    </select>

    <select id="getAcceptanceApprovedList" resultType="java.lang.Integer">





        select  IFNULL((todayApprovedNum-yesterDayApprovedNum),0) as approved  from 	(select sum(
                                         IF
                                             (
                                                     accept_status = 20
        <if test="type!=null and type ==1">
            AND d.create_time BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR),
        </if>
        <if test="startTime!=null and startTime !='' and endTime !=null and endTime !=''">
            AND d.create_time BETWEEN #{startTime} and #{endTime},
        </if>  1,
                                                     0
                                             )
                                     ) AS todayApprovedNum,
                                 sum(
                                         IF
                                             (
                                                     accept_status = 20
        <if test="type!=null and type ==1">
            AND d.create_time BETWEEN DATE_ADD(DATE_SUB(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR) and  DATE_ADD(CURDATE(), INTERVAL 0 HOUR),
        </if>
        <if test="beforeStartTime!=null and beforeStartTime !='' and beforeEndTime !=null and beforeEndTime !=''">
            AND d.create_time BETWEEN #{beforeStartTime} and #{beforeEndTime},
        </if>    1,
                                                     0
                                             )
                                     ) AS yesterDayApprovedNum
                          from ticket t
                                   INNER JOIN (
                              SELECT
                                  tol.`ticket_id`,
                                  MIN( tol.create_time ) AS create_time
                              FROM
                                  ticket_op_logs tol
                              WHERE
                                  op_type = 2
                                AND op_status = 20

                              GROUP BY
                                  tol.`ticket_id`
                          ) d ON t.`id` = d.ticket_id
                          where  t.alloc_department_num=#{orgId}
                         ) t
    </select>
    <select id="getTicketImg" resultMap="TicketImageMap">
        SELECT
            su.nick_name as opName,
            DATE_FORMAT(tol.update_time,'%Y-%m-%d %H:%i') as opTime,
            tol.op_code as operation,
            bv.*,
            substring_index(tol.msg,':', 1) as msg


        FROM
            ticket_op_logs tol
                left join base_vfs bv on bv.adjunct_id=tol.adjunct_id
                left join sys_user su on su.user_name=tol.creator
        WHERE
            ticket_id in
        <foreach collection="ids" item="id" separator="," open="(" close=")" >
            #{id}
        </foreach>
          AND tol.adjunct_id IS NOT NULL
          AND tol.adjunct_id != ''
        order by tol.update_time desc,bv.create_time desc
    </select>
    <select id="getImgByIds" resultType="com.zans.mms.model.BaseVfs">
        SELECT
            raw_stream,
            thumbnail_stream,
            raw_file_path,
            thumbnail_file_path,
            sort,
            img_type,
            content_type
        FROM
            base_vfs
        where id in
        <foreach collection="ids" item="id" separator="," open="(" close=")" >
            #{id}
        </foreach>
    </select>
    <select id="getBreakdownTicketWithoutOrgId" resultType="java.lang.Integer">
        SELECT
        IFNULL(count(*),0) as val
        FROM
        ticket
        WHERE
        ticket_type = 1
        AND edit_status=20
        <if test="type!=null and type ==1">
            and   create_time BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR)
        </if>
        <if test="type!=null and type ==2">
            and  DATEDIFF(create_time,NOW())=-2
        </if>
        <if test="type!=null and type ==3">
            and  DATEDIFF(create_time,NOW())=-6
        </if>
    </select>
    <select id="getBreakdownTicketCompleteWithoutOrgId" resultType="java.lang.Integer">
        SELECT
        IFNULL(count(*),0) as val
        FROM
        ticket t
        LEFT  JOIN
        (SELECT
        tol.`ticket_id`,
        MAX(tol.create_time) AS create_time
        FROM
        ticket_op_logs tol
        WHERE tol.msg='工单#验收'
        GROUP BY tol.`ticket_id`) d
        ON t.`id` = d.ticket_id
        where
        ticket_type = 1
        AND (ticket_status=4 or ticket_status=20)
        AND edit_status=20
        <if test="type!=null and type ==1">
            and (practical_complete_time BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR)
            or d.create_time BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR))     </if>
        <if test="type!=null and type ==2">
            and  DATEDIFF(practical_complete_time,NOW())=-2
        </if>
        <if test="type!=null and type ==3">
            and  DATEDIFF(practical_complete_time,NOW())=-6
        </if>
    </select>
    <select id="getDispatchMoney" resultType="java.lang.String">

        SELECT
            IFNULL(sum( IFNULL( predict_cost, 0 ) ),0) AS 	 predictCost
        FROM
            ticket   t
                INNER  JOIN
            (SELECT
                 tol.`ticket_id`,
                 MIN(tol.create_time) AS create_time
             FROM
                 ticket_op_logs tol
             WHERE op_type =1 AND op_status = 3
             GROUP BY tol.`ticket_id`) d
            ON t.`id` = d.ticket_id
        WHERE
            t.dispatch_status >2
        <if test="type!=null and type ==1">
            and  d.create_time  BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR)
        </if>
        <if test="type!=null and type ==2">
            and d.create_time BETWEEN DATE_ADD(DATE_SUB(CURDATE(),INTERVAL 3 DAY), INTERVAL 17 HOUR) and DATE_ADD(CURDATE(),INTERVAL 17 HOUR)
        </if>
        <if test="type!=null and type ==3">
            and d.create_time BETWEEN DATE_ADD(DATE_SUB(CURDATE(),INTERVAL 7 DAY), INTERVAL 17 HOUR) and DATE_ADD(CURDATE(),INTERVAL 17 HOUR)
        </if>
    </select>
    <select id="getDispatchNum" resultType="java.lang.Integer">
        SELECT
        IFNULL(count(*),0) as val
        FROM
        ticket t
        INNER  JOIN
        (SELECT
        tol.`ticket_id`,
        MIN(tol.create_time) AS create_time
        FROM
        ticket_op_logs tol
        WHERE op_type =1 AND op_status = 3
        GROUP BY tol.`ticket_id`) d
        ON t.`id` = d.ticket_id
        WHERE
        t.dispatch_status >2
        <if test="type!=null and type ==1">
            and  d.create_time  BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR)
        </if>
        <if test="type!=null and type ==2">
            and d.create_time BETWEEN DATE_ADD(DATE_SUB(CURDATE(),INTERVAL 3 DAY), INTERVAL 17 HOUR) and DATE_ADD(CURDATE(),INTERVAL 17 HOUR)
        </if>
        <if test="type!=null and type ==3">
            and d.create_time BETWEEN DATE_ADD(DATE_SUB(CURDATE(),INTERVAL 7 DAY), INTERVAL 17 HOUR) and DATE_ADD(CURDATE(),INTERVAL 17 HOUR)
        </if>
    </select>
    <select id="getAcceptanceMoney" resultType="java.lang.String">
        SELECT
        IFNULL(sum( IFNULL( accept_predict_cost, 0 ) ),0) AS 	 predictCost
        FROM
        ticket t
        INNER JOIN
        (SELECT
        tol.`ticket_id`,
        MIN(tol.create_time) AS create_time
        FROM
        ticket_op_logs tol
        WHERE op_type =2 AND op_status = 3
        GROUP BY tol.`ticket_id`) d
        ON t.`id` = d.ticket_id
        WHERE
        t.accept_status >2

        <if test="type!=null and type ==1">
            and  d.create_time  BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR)
        </if>
        <if test="type!=null and type ==2">
            and d.create_time BETWEEN DATE_ADD(DATE_SUB(CURDATE(),INTERVAL 3 DAY), INTERVAL 17 HOUR) and DATE_ADD(CURDATE(),INTERVAL 17 HOUR)
        </if>
        <if test="type!=null and type ==3">
            and d.create_time BETWEEN DATE_ADD(DATE_SUB(CURDATE(),INTERVAL 7 DAY), INTERVAL 17 HOUR) and DATE_ADD(CURDATE(),INTERVAL 17 HOUR)
        </if>
    </select>
    <select id="getAcceptanceNum" resultType="java.lang.Integer">
        SELECT
        IFNULL(count(*),0) as val
        FROM
        ticket t
        LEFT  JOIN
        (SELECT
        tol.`ticket_id`,
        MIN(tol.create_time) AS create_time
        FROM
        ticket_op_logs tol
        WHERE op_type =2 AND op_status = 3
        GROUP BY tol.`ticket_id`) d
        ON t.`id` = d.ticket_id
        WHERE
        t.accept_status >2
        <if test="type!=null and type ==1">
            and  d.create_time  BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR)
        </if>
        <if test="type!=null and type ==2">
            and d.create_time BETWEEN DATE_ADD(DATE_SUB(CURDATE(),INTERVAL 3 DAY), INTERVAL 17 HOUR) and DATE_ADD(CURDATE(),INTERVAL 17 HOUR)
        </if>
        <if test="type!=null and type ==3">
            and d.create_time BETWEEN DATE_ADD(DATE_SUB(CURDATE(),INTERVAL 7 DAY), INTERVAL 17 HOUR) and DATE_ADD(CURDATE(),INTERVAL 17 HOUR)
        </if>
    </select>
    <select id="getApprovedDispatchCount" resultType="java.lang.Integer">
        SELECT
        IFNULL(count(*),0) as val
        FROM
        ticket  t
        INNER  JOIN
        (SELECT
        tol.`ticket_id`,
        MIN(tol.create_time) AS create_time
        FROM
        ticket_op_logs tol
        WHERE op_type =1 AND op_status = 20
        GROUP BY tol.`ticket_id`) d
        ON t.`id` = d.ticket_id
        WHERE
        t.dispatch_status = 20
        and t.alloc_department_num ='10001'
        <if test="type!=null and type ==1">
            and  d.create_time  BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR)
        </if>
        <if test="type!=null and type ==2">
            and d.create_time BETWEEN DATE_ADD(DATE_SUB(CURDATE(),INTERVAL 3 DAY), INTERVAL 17 HOUR) and DATE_ADD(CURDATE(),INTERVAL 17 HOUR)
        </if>
        <if test="type!=null and type ==3">
            and d.create_time BETWEEN DATE_ADD(DATE_SUB(CURDATE(),INTERVAL 7 DAY), INTERVAL 17 HOUR) and DATE_ADD(CURDATE(),INTERVAL 17 HOUR)
        </if>
    </select>
    <select id="getApprovedAcceptanceCount" resultType="java.lang.Integer">
        SELECT
        IFNULL(count(*),0) as val
        FROM
        ticket  t
        INNER  JOIN
        (SELECT
        tol.`ticket_id`,
        MIN(tol.create_time) AS create_time
        FROM
        ticket_op_logs tol
        WHERE op_type =2 AND op_status = 20
        GROUP BY tol.`ticket_id`) d
        ON t.`id` = d.ticket_id
        WHERE
        t.accept_status = 20
        <if test="type!=null and type ==1">
            and  d.create_time  BETWEEN DATE_ADD(CURDATE(), INTERVAL 0 HOUR) and DATE_ADD(DATE_ADD(CURDATE(),INTERVAL 1 DAY), INTERVAL 0 HOUR)
        </if>
        <if test="type!=null and type ==2">
            and d.create_time BETWEEN DATE_ADD(DATE_SUB(CURDATE(),INTERVAL 3 DAY), INTERVAL 17 HOUR) and DATE_ADD(CURDATE(),INTERVAL 17 HOUR)
        </if>
        <if test="type!=null and type ==3">
            and d.create_time BETWEEN DATE_ADD(DATE_SUB(CURDATE(),INTERVAL 7 DAY), INTERVAL 17 HOUR) and DATE_ADD(CURDATE(),INTERVAL 17 HOUR)
        </if>
    </select>
    <select id="getTicketAndDispatchImg" resultMap="TicketImageMap">

        SELECT
            su.nick_name AS opName,
            DATE_FORMAT( t.create_time, '%Y-%m-%d %H:%i' ) AS opTime,
            '-1' AS operation,
            bv.*,
            '' AS msg
        FROM
            ticket t
                LEFT JOIN base_vfs bv ON bv.adjunct_id = t.adjunct_id
                LEFT JOIN sys_user su ON su.user_name = t.creator
                LEFT JOIN base_org bo ON bo.org_id = su.maintain_num
        WHERE
            t.id in
        <foreach collection="ids" item="id" separator="," open="(" close=")" >
            #{id}
        </foreach>
          AND t.adjunct_id IS NOT NULL
          AND t.adjunct_id != '' UNION ALL
        (
        SELECT
            su.nick_name AS opName,
            DATE_FORMAT( tol.update_time, '%Y-%m-%d %H:%i' ) AS opTime,
            tol.op_code AS operation,
            bv.*,
            substring_index( tol.msg, ':', 1 ) AS msg
        FROM
            ticket_op_logs tol
            LEFT JOIN base_vfs bv ON bv.adjunct_id = tol.adjunct_id
            LEFT JOIN sys_user su ON su.user_name = tol.creator
            LEFT JOIN base_org bo ON bo.org_id = su.maintain_num
        WHERE
            ticket_id  in
        <foreach collection="ids" item="id" separator="," open="(" close=")" >
            #{id}
        </foreach>
          AND tol.adjunct_id IS NOT NULL
          AND tol.adjunct_id != ''
            )
        ORDER BY opTime desc,create_time desc

    </select>
    <select id="getByPid" resultType="com.zans.mms.model.Ticket">
        select id,ticket_code,ticket_code_result from ticket where pid = #{pid}
    </select>
    <select id="getTicket" resultType="com.zans.mms.model.Ticket">
        select id,is_merge,pid from ticket where id = #{id}
    </select>
    <select id="getIdByPid" resultType="java.lang.Long">
        select id from ticket where pid = #{id}
    </select>
    <select id="getCode" resultType="java.lang.String">
        select ticket_code from ticket where id = #{id} limit 1
    </select>
    <select id="queryImport" resultType="com.zans.mms.vo.ticket.TicketSearchRespVO">
        select
            t.id,edit_status,upload_point_name,ticket_code,ticket_code_result,ticket_type, t.area_id, t.device_type, issue_type, issue_level,
            issue_source,
            dispatch_status,accept_status,maintenance_status,
            DATE_FORMAT(t.predict_arrive_time,'%Y-%m-%d %H:%i:%s') AS predict_arrive_time,
            DATE_FORMAT(t.predict_complete_time,'%Y-%m-%d %H:%i:%s') AS predict_complete_time,
            DATE_FORMAT(t.practical_arrive_time,'%Y-%m-%d %H:%i:%s') AS practical_arrive_time,
            DATE_FORMAT(t.practical_complete_time,'%Y-%m-%d %H:%i:%s') AS practical_complete_time,
            remark, t.creator,t.alloc_department_num,t.is_cost,t.predict_cost,t.accept_predict_cost,t.accept_adjust_cost,
            DATE_FORMAT(t.create_time,'%Y-%m-%d %H:%i:%s') AS create_time,
            t.pid,t.is_merge,
            case when t.edit_status = 0 then 19 else ticket_status end as ticket_status,
            (select point_id from ticket_point tp where t.id = tp.ticket_id order by id asc limit 1 ) as point_id,
            (select asset_id from ticket_point_device tpd where t.id = tpd.ticket_id order by id asc limit 1 ) as asset_id,
        (select dp.point_name from device_point dp where point_id = dp.id ) as point_name,
         (select a.asset_code from asset a where asset_id = a.id ) as asset_code,
        IFNULL( DATE_FORMAT(t.dispatch_time,'%Y-%m-%d %H:%i:%s'), DATE_FORMAT(t.create_time,'%Y-%m-%d %H:%i:%s')) as
        dispatch_time,
        IFNULL( DATE_FORMAT(t.accept_time,'%Y-%m-%d %H:%i:%s'), DATE_FORMAT(t.create_time,'%Y-%m-%d %H:%i:%s')) as
        accept_time
        from ticket t
        where t.import_num=#{importNum}
        order by t.create_time desc
    </select>


    <select id="queryFaultTicket" resultType="com.zans.mms.vo.ticket.chart.FaultTicketRespVO">
        select IFNULL(sum(IF(t.create_time &gt;=#{startTime} and t.create_time &lt;=#{endTime} and alloc_department_num = #{orgId} and t.ticket_type = 1 and t.is_merge is null and t.edit_status = 20,1,0)),0) as total,
               IFNULL(sum(IF(t.practical_complete_time &gt;=#{startTime} and t.practical_complete_time &lt;=#{endTime} and alloc_department_num = #{orgId} and t.ticket_type = 1 and t.is_merge is null and t.edit_status = 20,1,0)),0) as complete,
               IFNULL(sum(IF(t.create_time &gt;=#{startTime} and t.create_time &lt;=#{endTime} and t.practical_complete_time &gt;=#{startTime} and t.practical_complete_time &lt;=#{endTime}  and t.ticket_type = 1 and alloc_department_num = #{orgId} and t.is_merge is null and t.edit_status = 20,1,0)),0) as completeInWeek
        from ticket t
    </select>
    <select id="getTicketSource" resultType="com.zans.mms.vo.ticket.chart.TicketPieCharRespVO">
        SELECT
        IFNULL((SELECT  sci.item_value  FROM sys_constant_item sci WHERE  sci.dict_key='issue_source' AND sci.`item_key` = t.issue_source),'未知')   AS name,
        COUNT(1)  AS value
        FROM ticket t
        WHERE t.edit_status = 20 AND t.ticket_status >0
        and t.is_merge is null and t.ticket_type = 1
        <if test="startTime != null and startTime !='' and endTime !=null and endTime!=''">
            and t.create_time &gt;= #{startTime} and t.create_time&lt;=#{endTime}
        </if>
        GROUP BY t.issue_source
        order by value desc
    </select>
    <select id="getTicketFaultType" resultType="com.zans.mms.vo.ticket.chart.TicketPieCharRespVO">
        SELECT
        IFNULL(bft.fault_name,'未知')     AS name,
        COUNT(1)  AS value
        FROM  ticket t
        LEFT JOIN base_fault_type bft ON IF(t.practical_issue_type=0,t.issue_type,t.practical_issue_type) = bft.fault_id
        WHERE t.edit_status = 20 and  t.ticket_status >0  and t.is_merge is null and t.ticket_type = 1
        <if test="startTime != null and startTime !='' and endTime !=null and endTime!=''">
            and t.create_time  &gt;= #{startTime} and  t.create_time &lt;=#{endTime}
        </if>
        GROUP BY bft.fault_id
        ORDER BY value desc
    </select>
    <select id="getTicketDeviceType" resultType="com.zans.mms.vo.ticket.chart.TicketPieCharRespVO">
        SELECT
        bdt.type_name     AS name,
        COUNT(1)  AS value
        FROM  ticket t
        LEFT JOIN base_device_type bdt ON t.device_type = bdt.type_id
        WHERE t.edit_status = 20 and  t.ticket_status >0  and t.is_merge is null
        <if test="startTime != null and startTime !='' and endTime !=null and endTime!=''">
            and t.create_time  &gt;= #{startTime} and t.create_time &lt;=#{endTime}
        </if>
        and t.ticket_type = 1
        GROUP BY bdt.type_name
        ORDER BY value desc
    </select>
    <select id="getDispatchRecentTime" resultType="java.lang.String">
        select IFNULL(max(tol.create_time),'') from ticket t left join ticket_op_logs tol on t.id = tol.ticket_id
        where t.id = #{id} and tol.op_type = 1 and op_status=3
    </select>

    <select id="getAcceptRecentTime" resultType="java.lang.String">
        select IFNULL(max(tol.create_time),'') from ticket t left join ticket_op_logs tol on t.id = tol.ticket_id
        where t.id = #{id} and tol.op_type = 2 and op_status=3
    </select>

</mapper>

